Search.setIndex({"alltitles": {"(Maximum inner-product search)": [[94, "maximum-inner-product-search"]], "0. Installation": [[91, "installation"], [92, "installation"], [104, "installation"], [105, "installation"], [106, "installation"]], "0. Preparation": [[95, "preparation"], [101, "preparation"], [110, "preparation"], [111, "preparation"], [112, "preparation"]], "0. Setup": [[108, "setup"]], "1. BAAI General Embedding": [[90, "baai-general-embedding"]], "1. BGE-M3 structure": [[92, "bge-m3-structure"]], "1. Background": [[89, "background"]], "1. Data": [[110, "data"], [111, "data"], [112, "data"]], "1. Dataset": [[108, "dataset"]], "1. Datasets": [[106, "datasets"]], "1. Embedding": [[88, null]], "1. Encode sentences": [[91, "encode-sentences"]], "1. Flat Index": [[101, "flat-index"]], "1. IndexFlat*": [[99, "indexflat"]], "1. Installation": [[98, "installation"]], "1. Intro": [[104, "intro"]], "1. Jaccard Similarity": [[94, "jaccard-similarity"]], "1. Recall": [[95, "recall"]], "1. Run the Evaluation": [[105, "run-the-evaluation"]], "1. Scalar Quantizer": [[100, "scalar-quantizer"]], "2. BGE Series Models": [[90, "bge-series-models"]], "2. Comparison": [[91, "comparison"]], "2. Data Preparation": [[98, "data-preparation"]], "2. Embedding": [[108, "embedding"]], "2. Euclidean Distance": [[94, "euclidean-distance"]], "2. IVF Index": [[101, "ivf-index"]], "2. IndexIVF*": [[99, "indexivf"]], "2. Indexing": [[110, "indexing"], [111, "indexing"], [112, "indexing"]], "2. MRR": [[95, "mrr"]], "2. Metrics": [[93, null]], "2. Model": [[106, "model"]], "2. Multi-Functionality": [[92, "multi-functionality"]], "2. Product Quantizer": [[100, "product-quantizer"]], "2. Submit to MTEB Leaderboard": [[105, "submit-to-mteb-leaderboard"]], "2.1 BGE": [[90, "bge"]], "2.1 Dense Retrieval": [[92, "dense-retrieval"]], "2.2 BGE v1.5": [[90, "bge-v1-5"]], "2.2 Sparse Retrieval": [[92, "sparse-retrieval"]], "2.3 LLM-Embedder": [[90, "llm-embedder"]], "2.3 Multi-Vector": [[92, "multi-vector"]], "2.4 BGE M3": [[90, "bge-m3"]], "2.4 Hybrid Ranking": [[92, "hybrid-ranking"]], "3. Cosine Similarity": [[94, "cosine-similarity"]], "3. Create Index on CPU": [[98, "create-index-on-cpu"]], "3. Evaluate": [[106, "evaluate"]], "3. HNSW Index": [[101, "hnsw-index"]], "3. IndexHNSW*": [[99, "indexhnsw"]], "3. Indexing": [[96, null], [108, "indexing"]], "3. Partially Evaluate": [[105, "partially-evaluate"]], "3. Retreive and Generate": [[111, "retreive-and-generate"]], "3. Retrieve and Generate": [[110, "retrieve-and-generate"], [112, "retrieve-and-generate"]], "3. nDCG": [[95, "ndcg"]], "3.1 Naive Approach": [[94, "naive-approach"]], "3.2 PyTorch Implementation": [[94, "pytorch-implementation"]], "3.3 PyTorch Function Call": [[94, "pytorch-function-call"]], "4. Build GPU Index and Search": [[98, "build-gpu-index-and-search"]], "4. Evaluation": [[102, null]], "4. Future Work": [[105, "future-work"]], "4. IndexLSH": [[99, "indexlsh"]], "4. Inner Product/Dot Product": [[94, "inner-product-dot-product"]], "4. LSH": [[101, "lsh"]], "4. Precision": [[95, "precision"]], "4. Retrieval": [[108, "retrieval"]], "4. Submit to MTEB Leaderboard": [[106, "submit-to-mteb-leaderboard"]], "5. Examples": [[94, "examples"]], "5. MAP": [[95, "map"]], "5. Reranking": [[107, null], [108, "reranking"]], "5. Results": [[98, "results"]], "5. Scalar Quantizer Index": [[101, "scalar-quantizer-index"]], "5.1 Recall": [[103, "recall"]], "5.2 MRR": [[103, "mrr"]], "5.3 nDCG": [[103, "ndcg"]], "6. Evaluate": [[108, "evaluate"]], "6. Product Quantizer Index": [[101, "product-quantizer-index"]], "6. RAG": [[109, null]], "6.1 Recall": [[108, "recall"]], "6.2 MRR": [[108, "mrr"]], "6.3 nDCG": [[108, "ndcg"]], "AbsArguments": [[3, null], [9, null]], "AbsDataset": [[4, null], [10, null]], "AbsEmbedder": [[15, null]], "AbsEmbedderCollator": [[4, "absembeddercollator"]], "AbsEmbedderModel": [[5, "absembeddermodel"]], "AbsEmbedderSameDatasetCollator": [[4, "absembeddersamedatasetcollator"], [35, "absembeddersamedatasetcollator"]], "AbsEmbedderSameDatasetTrainDataset": [[4, "absembeddersamedatasettraindataset"]], "AbsEmbedderTrainDataset": [[4, "absembeddertraindataset"]], "AbsEmbedderTrainer": [[6, "absembeddertrainer"], [7, "absembeddertrainer"]], "AbsLLMRerankerCollator": [[10, "absllmrerankercollator"]], "AbsLLMRerankerTrainDataset": [[10, "absllmrerankertraindataset"]], "AbsModeling": [[5, null], [11, null]], "AbsReranker": [[16, null]], "AbsRerankerCollator": [[10, "absrerankercollator"]], "AbsRerankerModel": [[11, "absrerankermodel"]], "AbsRerankerTrainDataset": [[10, "absrerankertraindataset"]], "AbsRerankerTrainer": [[12, "absrerankertrainer"], [13, "absrerankertrainer"]], "AbsRunner": [[6, null], [12, null]], "AbsTrainer": [[7, null], [13, null]], "Abstract Class": [[0, null]], "All Available GPUs": [[98, "all-available-gpus"]], "Arguments": [[29, null], [34, null], [45, null], [52, null], [57, null]], "BAAI General Embedding": [[87, null]], "BGE": [[85, "bge"], [89, "bge"]], "BGE Explanation": [[91, null]], "BGE Series": [[90, null]], "BGE-M3": [[83, null], [92, null]], "BGE-Reranker": [[84, null]], "BGE-en-icl": [[82, null]], "BGE-v1": [[85, null]], "BGE-v1.5": [[85, "bge-v1-5"]], "Base": [[28, null], [40, null], [51, null], [62, null]], "BaseEmbedder": [[69, null], [72, null]], "BaseLLMReranker": [[74, null]], "BaseReranker": [[77, null]], "C-MTEB": [[106, null]], "Choosing Index": [[101, null]], "Commercial Models": [[89, "commercial-models"]], "Dataset": [[35, null], [101, "dataset"]], "Decoder Only": [[27, null], [50, null]], "DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[35, "decoderonlyembeddericlsamedatasettraindataset"]], "Embedder": [[2, null], [26, null], [71, null]], "EmbedderOutput": [[5, "embedderoutput"]], "EmbedderTrainerCallbackForDataRefresh": [[4, "embeddertrainercallbackfordatarefresh"]], "Encoder Only": [[39, null], [61, null]], "EncoderOnlyEmbedderM3Model": [[46, "encoderonlyembedderm3model"]], "EncoderOnlyEmbedderM3ModelForInference": [[46, "encoderonlyembedderm3modelforinference"]], "Evaluation": [[17, null], [103, null]], "Evaluation Metrics": [[95, null]], "Example": [[99, "example"], [99, "id3"], [99, "id7"]], "Faiss GPU": [[98, null]], "Faiss Indexes": [[99, null]], "Faiss Quantizers": [[100, null]], "Finetune": [[1, null], [25, null]], "FlagAutoModel": [[67, null]], "FlagAutoReranker": [[68, null]], "Get Embedding": [[89, "get-embedding"]], "Helper function": [[101, "helper-function"]], "ICL": [[33, null]], "ICLLLMEmbedder": [[70, null]], "Indexing Using Faiss": [[97, null]], "Inference": [[14, null], [66, null]], "Install from sources:": [[80, "install-from-sources"]], "Installation": [[80, null]], "Intro": [[99, "intro"], [99, "id1"], [99, "id4"]], "Intro to Embedding": [[89, null]], "Introduction": [[86, null]], "LayerWiseLLMReranker": [[75, null]], "Layerwise": [[56, null]], "LightweightLLMReranker": [[76, null]], "M3": [[44, null]], "M3Embedder": [[73, null]], "MIRACL": [[18, null]], "MKQA": [[21, null]], "MTEB": [[104, null]], "MTEB Leaderboard": [[105, null]], "Methods": [[4, "methods"], [4, "id1"], [4, "id2"], [5, "methods"], [6, "methods"], [7, "methods"], [10, "methods"], [11, "methods"], [12, "methods"], [13, "methods"], [15, "methods"], [16, "methods"], [19, "methods"], [22, "methods"], [30, "methods"], [35, "methods"], [36, "methods"], [41, "methods"], [46, "methods"], [53, "methods"], [58, "methods"], [63, "methods"], [67, "methods"], [68, "methods"], [69, "methods"], [70, "methods"], [72, "methods"], [73, "methods"], [74, "methods"], [75, "methods"], [76, "methods"], [77, "methods"]], "Modeling": [[30, null], [36, null], [41, null], [46, null], [53, null], [58, null], [63, null]], "Multiple GPUs": [[98, "multiple-gpus"]], "Open-source Models": [[89, "open-source-models"]], "OpenAI": [[89, "openai"]], "Option 1:": [[98, "option-1"]], "Option 2:": [[98, "option-2"]], "Packages": [[101, "packages"]], "Preparation": [[99, "preparation"], [100, "preparation"]], "Product Quantizer": [[100, "id2"]], "Product Quantizer IVF Index": [[100, "product-quantizer-ivf-index"]], "Product Quantizer Index": [[100, "product-quantizer-index"]], "Quick Start": [[81, null]], "RAG with LangChain": [[111, null]], "RAG with LlamaIndex": [[112, null]], "Relationship with Cosine similarity": [[94, "relationship-with-cosine-similarity"]], "Reranker": [[8, null], [49, null], [78, null], [108, null]], "RerankerOutput": [[11, "rerankeroutput"]], "Runner": [[31, null], [37, null], [42, null], [47, null], [54, null], [59, null], [64, null]], "Scalar Quantizer": [[100, "id1"]], "Scalar Quantizer Index": [[100, "scalar-quantizer-index"]], "Sentence Transformers": [[89, "sentence-transformers"]], "Shortage": [[99, "shortage"], [99, "id6"]], "Similarity": [[94, null]], "Simple RAG From Scratch": [[110, null]], "Single GPU:": [[98, "single-gpu"]], "Step 0: Preparation": [[81, "step-0-preparation"]], "Step 0: Setup": [[97, "step-0-setup"], [103, "step-0-setup"]], "Step 1: Dataset": [[97, "step-1-dataset"]], "Step 1: Load Dataset": [[103, "step-1-load-dataset"]], "Step 1: Text -> Embedding": [[81, "step-1-text-embedding"]], "Step 2: Calculate Similarity": [[81, "step-2-calculate-similarity"]], "Step 2: Embedding": [[103, "step-2-embedding"]], "Step 2: Text Embedding": [[97, "step-2-text-embedding"]], "Step 3.5 (Optional): Saving Faiss index": [[97, "step-3-5-optional-saving-faiss-index"]], "Step 3: Indexing": [[97, "step-3-indexing"], [103, "step-3-indexing"]], "Step 3: Ranking": [[81, "step-3-ranking"]], "Step 4: Evaluate": [[81, "step-4-evaluate"]], "Step 4: Find answers to the query": [[97, "step-4-find-answers-to-the-query"]], "Step 4: Retrieval": [[103, "step-4-retrieval"]], "Step 5: Evaluate": [[103, "step-5-evaluate"]], "Tradeoff": [[99, "tradeoff"], [99, "id2"], [99, "id5"]], "Trainer": [[32, null], [38, null], [43, null], [48, null], [55, null], [60, null], [65, null]], "Using pip:": [[80, "using-pip"]], "Voyage AI": [[89, "voyage-ai"]], "data_loader": [[19, null], [22, null]], "evaluator": [[23, null]], "faiss-cpu": [[97, "faiss-cpu"]], "faiss-gpu on Linux (x86_64)": [[97, "faiss-gpu-on-linux-x86-64"]], "runner": [[20, null], [24, null]]}, "docnames": ["API/abc", "API/abc/finetune", "API/abc/finetune/embedder", "API/abc/finetune/embedder/AbsArguments", "API/abc/finetune/embedder/AbsDataset", "API/abc/finetune/embedder/AbsModeling", "API/abc/finetune/embedder/AbsRunner", "API/abc/finetune/embedder/AbsTrainer", "API/abc/finetune/reranker", "API/abc/finetune/reranker/AbsArguments", "API/abc/finetune/reranker/AbsDataset", "API/abc/finetune/reranker/AbsModeling", "API/abc/finetune/reranker/AbsRunner", "API/abc/finetune/reranker/AbsTrainer", "API/abc/inference", "API/abc/inference/AbsEmbedder", "API/abc/inference/AbsReranker", "API/evaluation", "API/evaluation/miracl", "API/evaluation/miracl/data_loader", "API/evaluation/miracl/runner", "API/evaluation/mkqa", "API/evaluation/mkqa/data_loader", "API/evaluation/mkqa/evaluator", "API/evaluation/mkqa/runner", "API/finetune", "API/finetune/embedder", "API/finetune/embedder/decoder_only", "API/finetune/embedder/decoder_only/base", "API/finetune/embedder/decoder_only/base/arguments", "API/finetune/embedder/decoder_only/base/modeling", "API/finetune/embedder/decoder_only/base/runner", "API/finetune/embedder/decoder_only/base/trainer", "API/finetune/embedder/decoder_only/icl", "API/finetune/embedder/decoder_only/icl/arguments", "API/finetune/embedder/decoder_only/icl/dataset", "API/finetune/embedder/decoder_only/icl/modeling", "API/finetune/embedder/decoder_only/icl/runner", "API/finetune/embedder/decoder_only/icl/trainer", "API/finetune/embedder/encoder_only", "API/finetune/embedder/encoder_only/base", "API/finetune/embedder/encoder_only/base/modeling", "API/finetune/embedder/encoder_only/base/runner", "API/finetune/embedder/encoder_only/base/trainer", "API/finetune/embedder/encoder_only/m3", "API/finetune/embedder/encoder_only/m3/arguments", "API/finetune/embedder/encoder_only/m3/modeling", "API/finetune/embedder/encoder_only/m3/runner", "API/finetune/embedder/encoder_only/m3/trainer", "API/finetune/reranker", "API/finetune/reranker/decoder_only", "API/finetune/reranker/decoder_only/base", "API/finetune/reranker/decoder_only/base/arguments", "API/finetune/reranker/decoder_only/base/modeling", "API/finetune/reranker/decoder_only/base/runner", "API/finetune/reranker/decoder_only/base/trainer", "API/finetune/reranker/decoder_only/layerwise", "API/finetune/reranker/decoder_only/layerwise/arguments", "API/finetune/reranker/decoder_only/layerwise/modeling", "API/finetune/reranker/decoder_only/layerwise/runner", "API/finetune/reranker/decoder_only/layerwise/trainer", "API/finetune/reranker/encoder_only", "API/finetune/reranker/encoder_only/base", "API/finetune/reranker/encoder_only/base/modeling", "API/finetune/reranker/encoder_only/base/runner", "API/finetune/reranker/encoder_only/base/trainer", "API/inference", "API/inference/FlagAutoModel", "API/inference/FlagAutoReranker", "API/inference/embedder/decoder_only/BaseLLMEmbedder", "API/inference/embedder/decoder_only/ICLLLMEmbedder", "API/inference/embedder/embedder", "API/inference/embedder/encoder_only/BaseEmbedder", "API/inference/embedder/encoder_only/M3Embedder", "API/inference/reranker/decoder_only/BaseLLMReranker", "API/inference/reranker/decoder_only/LayerWiseLLMReranker", "API/inference/reranker/decoder_only/LightweightLLMReranker", "API/inference/reranker/encoder_only/BaseReranker", "API/inference/reranker/reranker", "C-MTEB", "Introduction/installation", "Introduction/quick_start", "bge/bge_icl", "bge/bge_m3", "bge/bge_reranker", "bge/bge_v1", "bge/introduction", "index", "tutorial/1_Embedding", "tutorial/1_Embedding/1.1.1", "tutorial/1_Embedding/1.2.1", "tutorial/1_Embedding/1.2.2", "tutorial/1_Embedding/1.2.3", "tutorial/2_Metrics", "tutorial/2_Metrics/2.1", "tutorial/2_Metrics/2.2", "tutorial/3_Indexing", "tutorial/3_Indexing/3.1.1", "tutorial/3_Indexing/3.1.2", "tutorial/3_Indexing/3.1.3", "tutorial/3_Indexing/3.1.4", "tutorial/3_Indexing/3.1.5", "tutorial/4_Evaluation", "tutorial/4_Evaluation/4.1.1", "tutorial/4_Evaluation/4.2.1", "tutorial/4_Evaluation/4.2.2", "tutorial/4_Evaluation/4.3.1", "tutorial/5_Reranking", "tutorial/5_Reranking/5.1", "tutorial/6_RAG", "tutorial/6_RAG/6.1", "tutorial/6_RAG/6.2", "tutorial/6_RAG/6.3"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["API/abc.rst", "API/abc/finetune.rst", "API/abc/finetune/embedder.rst", "API/abc/finetune/embedder/AbsArguments.rst", "API/abc/finetune/embedder/AbsDataset.rst", "API/abc/finetune/embedder/AbsModeling.rst", "API/abc/finetune/embedder/AbsRunner.rst", "API/abc/finetune/embedder/AbsTrainer.rst", "API/abc/finetune/reranker.rst", "API/abc/finetune/reranker/AbsArguments.rst", "API/abc/finetune/reranker/AbsDataset.rst", "API/abc/finetune/reranker/AbsModeling.rst", "API/abc/finetune/reranker/AbsRunner.rst", "API/abc/finetune/reranker/AbsTrainer.rst", "API/abc/inference.rst", "API/abc/inference/AbsEmbedder.rst", "API/abc/inference/AbsReranker.rst", "API/evaluation.rst", "API/evaluation/miracl.rst", "API/evaluation/miracl/data_loader.rst", "API/evaluation/miracl/runner.rst", "API/evaluation/mkqa.rst", "API/evaluation/mkqa/data_loader.rst", "API/evaluation/mkqa/evaluator.rst", "API/evaluation/mkqa/runner.rst", "API/finetune.rst", "API/finetune/embedder.rst", "API/finetune/embedder/decoder_only.rst", "API/finetune/embedder/decoder_only/base.rst", "API/finetune/embedder/decoder_only/base/arguments.rst", "API/finetune/embedder/decoder_only/base/modeling.rst", "API/finetune/embedder/decoder_only/base/runner.rst", "API/finetune/embedder/decoder_only/base/trainer.rst", "API/finetune/embedder/decoder_only/icl.rst", "API/finetune/embedder/decoder_only/icl/arguments.rst", "API/finetune/embedder/decoder_only/icl/dataset.rst", "API/finetune/embedder/decoder_only/icl/modeling.rst", "API/finetune/embedder/decoder_only/icl/runner.rst", "API/finetune/embedder/decoder_only/icl/trainer.rst", "API/finetune/embedder/encoder_only.rst", "API/finetune/embedder/encoder_only/base.rst", "API/finetune/embedder/encoder_only/base/modeling.rst", "API/finetune/embedder/encoder_only/base/runner.rst", "API/finetune/embedder/encoder_only/base/trainer.rst", "API/finetune/embedder/encoder_only/m3.rst", "API/finetune/embedder/encoder_only/m3/arguments.rst", "API/finetune/embedder/encoder_only/m3/modeling.rst", "API/finetune/embedder/encoder_only/m3/runner.rst", "API/finetune/embedder/encoder_only/m3/trainer.rst", "API/finetune/reranker.rst", "API/finetune/reranker/decoder_only.rst", "API/finetune/reranker/decoder_only/base.rst", "API/finetune/reranker/decoder_only/base/arguments.rst", "API/finetune/reranker/decoder_only/base/modeling.rst", "API/finetune/reranker/decoder_only/base/runner.rst", "API/finetune/reranker/decoder_only/base/trainer.rst", "API/finetune/reranker/decoder_only/layerwise.rst", "API/finetune/reranker/decoder_only/layerwise/arguments.rst", "API/finetune/reranker/decoder_only/layerwise/modeling.rst", "API/finetune/reranker/decoder_only/layerwise/runner.rst", "API/finetune/reranker/decoder_only/layerwise/trainer.rst", "API/finetune/reranker/encoder_only.rst", "API/finetune/reranker/encoder_only/base.rst", "API/finetune/reranker/encoder_only/base/modeling.rst", "API/finetune/reranker/encoder_only/base/runner.rst", "API/finetune/reranker/encoder_only/base/trainer.rst", "API/inference.rst", "API/inference/FlagAutoModel.rst", "API/inference/FlagAutoReranker.rst", "API/inference/embedder/decoder_only/BaseLLMEmbedder.rst", "API/inference/embedder/decoder_only/ICLLLMEmbedder.rst", "API/inference/embedder/embedder.rst", "API/inference/embedder/encoder_only/BaseEmbedder.rst", "API/inference/embedder/encoder_only/M3Embedder.rst", "API/inference/reranker/decoder_only/BaseLLMReranker.rst", "API/inference/reranker/decoder_only/LayerWiseLLMReranker.rst", "API/inference/reranker/decoder_only/LightweightLLMReranker.rst", "API/inference/reranker/encoder_only/BaseReranker.rst", "API/inference/reranker/reranker.rst", "C-MTEB.rst", "Introduction/installation.rst", "Introduction/quick_start.ipynb", "bge/bge_icl.rst", "bge/bge_m3.rst", "bge/bge_reranker.rst", "bge/bge_v1.rst", "bge/introduction.rst", "index.rst", "tutorial/1_Embedding.rst", "tutorial/1_Embedding/1.1.1.ipynb", "tutorial/1_Embedding/1.2.1.ipynb", "tutorial/1_Embedding/1.2.2.ipynb", "tutorial/1_Embedding/1.2.3.ipynb", "tutorial/2_Metrics.rst", "tutorial/2_Metrics/2.1.ipynb", "tutorial/2_Metrics/2.2.ipynb", "tutorial/3_Indexing.rst", "tutorial/3_Indexing/3.1.1.ipynb", "tutorial/3_Indexing/3.1.2.ipynb", "tutorial/3_Indexing/3.1.3.ipynb", "tutorial/3_Indexing/3.1.4.ipynb", "tutorial/3_Indexing/3.1.5.ipynb", "tutorial/4_Evaluation.rst", "tutorial/4_Evaluation/4.1.1.ipynb", "tutorial/4_Evaluation/4.2.1.ipynb", "tutorial/4_Evaluation/4.2.2.ipynb", "tutorial/4_Evaluation/4.3.1.ipynb", "tutorial/5_Reranking.rst", "tutorial/5_Reranking/5.1.ipynb", "tutorial/6_RAG.rst", "tutorial/6_RAG/6.1.ipynb", "tutorial/6_RAG/6.2.ipynb", "tutorial/6_RAG/6.3.ipynb"], "indexentries": {"_colbert_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._colbert_embedding", false]], "_compute_cross_device_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_cross_device_neg_loss", false]], "_compute_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_in_batch_neg_loss", false]], "_compute_no_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_no_in_batch_neg_loss", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._compute_similarity", false]], "_concatenate_results_from_multi_process() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder._concatenate_results_from_multi_process", false]], "_create_batch_data() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._create_batch_data", false]], "_create_batch_data() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlsamedatasettraindataset method)": [[35, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset._create_batch_data", false]], "_dense_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._dense_embedding", false]], "_dist_gather_tensor() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._dist_gather_tensor", false]], "_encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._encode", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absembedder static method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder._encode_multi_process_worker", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absreranker static method)": [[16, "FlagEmbedding.abc.inference.AbsReranker._encode_multi_process_worker", false]], "_get_file_batch_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset static method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_file_batch_size", false]], "_get_queries_attention_mask() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._get_queries_attention_mask", false]], "_get_train_group_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_train_group_size", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._load_dataset", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._sentence_embedding", false]], "_shuffle_text() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._shuffle_text", false]], "_shuffle_text() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._shuffle_text", false]], "_sparse_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._sparse_embedding", false]], "absembedder (class in flagembedding.abc.inference)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder", false]], "absembeddercollator (class in flagembedding.abc.finetune.embedder)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderCollator", false]], "absembedderdataarguments (class in flagembedding.abc.finetune.embedder)": [[9, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderDataArguments", false]], "absembeddermodel (class in flagembedding.abc.finetune.embedder)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel", false]], "absembeddermodelarguments (class in flagembedding.abc.finetune.embedder)": [[9, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModelArguments", false]], "absembedderrunner (class in flagembedding.abc.finetune.embedder)": [[6, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner", false]], "absembeddersamedatasetcollator (class in flagembedding.abc.finetune.embedder)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasetcollator (class in flagembedding.finetune.embedder.decoder_only.icl)": [[35, "FlagEmbedding.finetune.embedder.decoder_only.icl.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasettraindataset (class in flagembedding.abc.finetune.embedder)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset", false]], "absembeddertraindataset (class in flagembedding.abc.finetune.embedder)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset", false]], "absembeddertrainer (class in flagembedding.abc.finetune.embedder)": [[7, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer", false]], "absllmrerankercollator (class in flagembedding.abc.finetune.reranker)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerCollator", false]], "absllmrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerTrainDataset", false]], "absreranker (class in flagembedding.abc.inference)": [[16, "FlagEmbedding.abc.inference.AbsReranker", false]], "absrerankercollator (class in flagembedding.abc.finetune.reranker)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsRerankerCollator", false]], "absrerankerdataarguments (class in flagembedding.abc.finetune.reranker)": [[3, "FlagEmbedding.abc.finetune.reranker.AbsRerankerDataArguments", false]], "absrerankermodel (class in flagembedding.abc.finetune.reranker)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel", false]], "absrerankermodelarguments (class in flagembedding.abc.finetune.reranker)": [[3, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModelArguments", false]], "absrerankerrunner (class in flagembedding.abc.finetune.reranker)": [[12, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner", false]], "absrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset", false]], "absrerankertrainer (class in flagembedding.abc.finetune.reranker)": [[13, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer", false]], "baseembedder (class in flagembedding.inference.embedder.encoder_only.base)": [[72, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder", false]], "basellmembedder (class in flagembedding.inference.embedder.decoder_only.base)": [[69, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder", false]], "basellmreranker (class in flagembedding.inference.reranker.decoder_only.base)": [[74, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker", false]], "basereranker (class in flagembedding.inference.reranker.encoder_only.base)": [[77, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker", false]], "bidecoderonlyembeddericlmodel (class in flagembedding.finetune.embedder.decoder_only.icl)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel", false]], "bidecoderonlyembeddermodel (class in flagembedding.finetune.embedder.decoder_only.base)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel", false]], "biencoderonlyembeddermodel (class in flagembedding.finetune.embedder.encoder_only.base)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel", false]], "colbert_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.colbert_score", false]], "compute_colbert_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_colbert_score", false]], "compute_dense_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_dense_score", false]], "compute_lexical_matching_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_lexical_matching_score", false]], "compute_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_local_score", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddertrainer method)": [[7, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankertrainer method)": [[13, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_loss", false]], "compute_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_score", false]], "compute_score() (flagembedding.abc.inference.absreranker method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_score", false]], "compute_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score", false]], "compute_score_multi_process() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_multi_process", false]], "compute_score_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_single_device", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.base.basellmreranker)": [[74, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.layerwise.layerwisellmreranker)": [[75, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.lightweight.lightweightllmreranker)": [[76, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.encoder_only.base.basereranker)": [[77, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker.compute_score_single_gpu", false]], "compute_score_single_gpu() (flagembedding.abc.inference.absreranker method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.compute_score_single_gpu", false]], "compute_sparse_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_sparse_score", false]], "convert_id_to_token() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.convert_id_to_token", false]], "create_one_example() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[10, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset.create_one_example", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.base)": [[30, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[58, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel", false]], "crossencodermodel (class in flagembedding.finetune.reranker.encoder_only.base)": [[63, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel", false]], "decoderonlyembeddericldataarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[34, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLDataArguments", false]], "decoderonlyembeddericlmodelarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[34, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLModelArguments", false]], "decoderonlyembeddericlrunner (class in flagembedding.finetune.embedder.decoder_only.icl)": [[37, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner", false]], "decoderonlyembeddericlsamedatasettraindataset (class in flagembedding.finetune.embedder.decoder_only.icl)": [[35, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset", false]], "decoderonlyembeddericltrainer (class in flagembedding.finetune.embedder.decoder_only.icl)": [[38, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLTrainer", false]], "decoderonlyembeddermodelarguments (class in flagembedding.finetune.embedder.decoder_only.base)": [[29, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderModelArguments", false]], "decoderonlyembedderrunner (class in flagembedding.finetune.embedder.decoder_only.base)": [[54, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner", false]], "decoderonlyembeddertrainer (class in flagembedding.finetune.embedder.decoder_only.base)": [[55, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderTrainer", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.base)": [[31, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[59, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.base)": [[32, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerTrainer", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[60, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerTrainer", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.base.basellmembedder attribute)": [[69, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder attribute)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.base.baseembedder attribute)": [[72, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.m3.m3embedder attribute)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.DEFAULT_POOLING_METHOD", false]], "distill_loss() (flagembedding.abc.finetune.embedder.absembeddermodel static method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.distill_loss", false]], "embedderoutput (class in flagembedding.abc.finetune.embedder)": [[5, "FlagEmbedding.abc.finetune.embedder.EmbedderOutput", false]], "embeddertrainercallbackfordatarefresh (class in flagembedding.abc.finetune.embedder)": [[4, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh", false]], "enable_input_require_grads() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.enable_input_require_grads", false]], "encode() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.encode", false]], "encode() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.encode", false]], "encode() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.base.crossdecodermodel method)": [[30, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[58, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.encoder_only.base.crossencodermodel method)": [[63, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[69, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[72, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode", false]], "encode_corpus() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[69, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[72, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_corpus", false]], "encode_multi_process() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.encode_multi_process", false]], "encode_multi_process() (flagembedding.abc.inference.absreranker method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.encode_multi_process", false]], "encode_queries() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[69, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_queries", false]], "encode_queries_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries_single_device", false]], "encode_single_device() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[69, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[72, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_single_device", false]], "encoderonlyembedderm3model (class in flagembedding.finetune.embedder.encoder_only.m3)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model", false]], "encoderonlyembedderm3modelarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[45, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelArguments", false]], "encoderonlyembedderm3modelforinference (class in flagembedding.finetune.embedder.encoder_only.m3)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference", false]], "encoderonlyembedderm3runner (class in flagembedding.finetune.embedder.encoder_only.m3)": [[47, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner", false]], "encoderonlyembedderm3trainer (class in flagembedding.finetune.embedder.encoder_only.m3)": [[48, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Trainer", false]], "encoderonlyembedderm3trainingarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[45, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3TrainingArguments", false]], "encoderonlyembedderrunner (class in flagembedding.finetune.embedder.encoder_only.base)": [[42, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner", false]], "encoderonlyembeddertrainer (class in flagembedding.finetune.embedder.encoder_only.base)": [[43, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderTrainer", false]], "encoderonlyrerankerrunner (class in flagembedding.finetune.reranker.encoder_only.base)": [[64, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner", false]], "encoderonlyrerankertrainer (class in flagembedding.finetune.reranker.encoder_only.base)": [[65, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerTrainer", false]], "ensemble_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.ensemble_score", false]], "flagautomodel (class in flagembedding.inference)": [[67, "FlagEmbedding.inference.FlagAutoModel", false]], "flagautoreranker (class in flagembedding.inference)": [[68, "FlagEmbedding.inference.FlagAutoReranker", false]], "forward() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.forward", false]], "forward() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3modelforinference method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference.forward", false]], "forward() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[58, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.forward", false]], "from_finetuned() (flagembedding.inference.flagautomodel class method)": [[67, "FlagEmbedding.inference.FlagAutoModel.from_finetuned", false]], "from_finetuned() (flagembedding.inference.flagautoreranker class method)": [[68, "FlagEmbedding.inference.FlagAutoReranker.from_finetuned", false]], "get_detailed_example() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder static method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.get_detailed_example", false]], "get_detailed_inputs() (flagembedding.abc.inference.absreranker method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_inputs", false]], "get_detailed_instruct() (flagembedding.abc.inference.absembedder static method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.get_detailed_instruct", false]], "get_detailed_instruct() (flagembedding.abc.inference.absreranker method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_instruct", false]], "get_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.get_local_score", false]], "get_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner static method)": [[47, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.get_model", false]], "get_target_devices() (flagembedding.abc.inference.absembedder static method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.get_target_devices", false]], "get_target_devices() (flagembedding.abc.inference.absreranker static method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.get_target_devices", false]], "gradient_checkpointing_enable() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.gradient_checkpointing_enable", false]], "iclllmembedder (class in flagembedding.inference.embedder.decoder_only.icl)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder", false]], "layerwisellmreranker (class in flagembedding.inference.reranker.decoder_only.layerwise)": [[75, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker", false]], "lightweightllmreranker (class in flagembedding.inference.reranker.decoder_only.lightweight)": [[76, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker", false]], "load_data_collator() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[6, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_data_collator", false]], "load_data_collator() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[12, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_data_collator", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[6, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[12, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[54, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[37, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[42, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[47, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[31, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[59, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[64, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_train_dataset() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[6, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[12, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[37, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_train_dataset", false]], "load_trainer() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[6, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[12, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[54, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[37, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[42, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[47, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[31, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[59, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[64, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_trainer", false]], "m3embedder (class in flagembedding.inference.embedder.encoder_only.m3)": [[73, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder", false]], "on_epoch_end() (flagembedding.abc.finetune.embedder.embeddertrainercallbackfordatarefresh method)": [[4, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh.on_epoch_end", false]], "pooling() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[72, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.pooling", false]], "refresh_epoch() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[4, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset.refresh_epoch", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.base)": [[52, "FlagEmbedding.finetune.reranker.decoder_only.base.RerankerModelArguments", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[57, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.RerankerModelArguments", false]], "rerankeroutput (class in flagembedding.abc.finetune.reranker)": [[11, "FlagEmbedding.abc.finetune.reranker.RerankerOutput", false]], "run() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[6, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.run", false]], "run() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[12, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[54, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[37, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[31, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[59, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.run", false]], "save() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[5, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.save", false]], "save() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[36, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[41, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[46, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.save", false]], "save_pretrained() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[11, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save_pretrained", false]], "set_examples() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[70, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.set_examples", false]], "start_multi_process_pool() (flagembedding.abc.inference.absembedder method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.start_multi_process_pool", false]], "start_multi_process_pool() (flagembedding.abc.inference.absreranker method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.start_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absembedder static method)": [[15, "FlagEmbedding.abc.inference.AbsEmbedder.stop_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absreranker static method)": [[16, "FlagEmbedding.abc.inference.AbsReranker.stop_multi_process_pool", false]]}, "objects": {"FlagEmbedding.abc.finetune.embedder": [[4, 0, 1, "", "AbsEmbedderCollator"], [9, 0, 1, "", "AbsEmbedderDataArguments"], [5, 0, 1, "", "AbsEmbedderModel"], [9, 0, 1, "", "AbsEmbedderModelArguments"], [6, 0, 1, "", "AbsEmbedderRunner"], [4, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [4, 0, 1, "", "AbsEmbedderSameDatasetTrainDataset"], [4, 0, 1, "", "AbsEmbedderTrainDataset"], [7, 0, 1, "", "AbsEmbedderTrainer"], [5, 0, 1, "", "EmbedderOutput"], [4, 0, 1, "", "EmbedderTrainerCallbackForDataRefresh"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel": [[5, 1, 1, "", "_compute_cross_device_neg_loss"], [5, 1, 1, "", "_compute_in_batch_neg_loss"], [5, 1, 1, "", "_compute_no_in_batch_neg_loss"], [5, 1, 1, "", "_dist_gather_tensor"], [5, 1, 1, "", "compute_local_score"], [5, 1, 1, "", "compute_loss"], [5, 1, 1, "", "compute_score"], [5, 1, 1, "", "distill_loss"], [5, 1, 1, "", "encode"], [5, 1, 1, "", "forward"], [5, 1, 1, "", "get_local_score"], [5, 1, 1, "", "save"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner": [[6, 1, 1, "", "load_data_collator"], [6, 1, 1, "", "load_tokenizer_and_model"], [6, 1, 1, "", "load_train_dataset"], [6, 1, 1, "", "load_trainer"], [6, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset": [[4, 1, 1, "", "_create_batch_data"], [4, 1, 1, "", "_get_file_batch_size"], [4, 1, 1, "", "_get_train_group_size"], [4, 1, 1, "", "_load_dataset"], [4, 1, 1, "", "refresh_epoch"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset": [[4, 1, 1, "", "_load_dataset"], [4, 1, 1, "", "_shuffle_text"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer": [[7, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh": [[4, 1, 1, "", "on_epoch_end"]], "FlagEmbedding.abc.finetune.reranker": [[10, 0, 1, "", "AbsLLMRerankerCollator"], [10, 0, 1, "", "AbsLLMRerankerTrainDataset"], [10, 0, 1, "", "AbsRerankerCollator"], [3, 0, 1, "", "AbsRerankerDataArguments"], [11, 0, 1, "", "AbsRerankerModel"], [3, 0, 1, "", "AbsRerankerModelArguments"], [12, 0, 1, "", "AbsRerankerRunner"], [10, 0, 1, "", "AbsRerankerTrainDataset"], [13, 0, 1, "", "AbsRerankerTrainer"], [11, 0, 1, "", "RerankerOutput"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel": [[11, 1, 1, "", "compute_loss"], [11, 1, 1, "", "enable_input_require_grads"], [11, 1, 1, "", "encode"], [11, 1, 1, "", "forward"], [11, 1, 1, "", "gradient_checkpointing_enable"], [11, 1, 1, "", "save"], [11, 1, 1, "", "save_pretrained"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner": [[12, 1, 1, "", "load_data_collator"], [12, 1, 1, "", "load_tokenizer_and_model"], [12, 1, 1, "", "load_train_dataset"], [12, 1, 1, "", "load_trainer"], [12, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset": [[10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "_shuffle_text"], [10, 1, 1, "", "create_one_example"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer": [[13, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.inference": [[15, 0, 1, "", "AbsEmbedder"], [16, 0, 1, "", "AbsReranker"]], "FlagEmbedding.abc.inference.AbsEmbedder": [[15, 1, 1, "", "_concatenate_results_from_multi_process"], [15, 1, 1, "", "_encode_multi_process_worker"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "encode_corpus"], [15, 1, 1, "", "encode_multi_process"], [15, 1, 1, "", "encode_queries"], [15, 1, 1, "", "encode_single_device"], [15, 1, 1, "", "get_detailed_instruct"], [15, 1, 1, "", "get_target_devices"], [15, 1, 1, "", "start_multi_process_pool"], [15, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.abc.inference.AbsReranker": [[16, 1, 1, "", "_encode_multi_process_worker"], [16, 1, 1, "", "compute_score"], [16, 1, 1, "", "compute_score_single_gpu"], [16, 1, 1, "", "encode_multi_process"], [16, 1, 1, "", "get_detailed_inputs"], [16, 1, 1, "", "get_detailed_instruct"], [16, 1, 1, "", "get_target_devices"], [16, 1, 1, "", "start_multi_process_pool"], [16, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.finetune.embedder.decoder_only.base": [[53, 0, 1, "", "BiDecoderOnlyEmbedderModel"], [29, 0, 1, "", "DecoderOnlyEmbedderModelArguments"], [54, 0, 1, "", "DecoderOnlyEmbedderRunner"], [55, 0, 1, "", "DecoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel": [[53, 1, 1, "", "_compute_similarity"], [53, 1, 1, "", "_sentence_embedding"], [53, 1, 1, "", "compute_loss"], [53, 1, 1, "", "compute_score"], [53, 1, 1, "", "enable_input_require_grads"], [53, 1, 1, "", "encode"], [53, 1, 1, "", "gradient_checkpointing_enable"], [53, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner": [[54, 1, 1, "", "load_tokenizer_and_model"], [54, 1, 1, "", "load_trainer"], [54, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl": [[35, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [36, 0, 1, "", "BiDecoderOnlyEmbedderICLModel"], [34, 0, 1, "", "DecoderOnlyEmbedderICLDataArguments"], [34, 0, 1, "", "DecoderOnlyEmbedderICLModelArguments"], [37, 0, 1, "", "DecoderOnlyEmbedderICLRunner"], [35, 0, 1, "", "DecoderOnlyEmbedderICLSameDatasetTrainDataset"], [38, 0, 1, "", "DecoderOnlyEmbedderICLTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel": [[36, 1, 1, "", "_compute_similarity"], [36, 1, 1, "", "_sentence_embedding"], [36, 1, 1, "", "compute_loss"], [36, 1, 1, "", "compute_score"], [36, 1, 1, "", "enable_input_require_grads"], [36, 1, 1, "", "encode"], [36, 1, 1, "", "gradient_checkpointing_enable"], [36, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner": [[37, 1, 1, "", "load_tokenizer_and_model"], [37, 1, 1, "", "load_train_dataset"], [37, 1, 1, "", "load_trainer"], [37, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[35, 1, 1, "", "_create_batch_data"]], "FlagEmbedding.finetune.embedder.encoder_only.base": [[41, 0, 1, "", "BiEncoderOnlyEmbedderModel"], [42, 0, 1, "", "EncoderOnlyEmbedderRunner"], [43, 0, 1, "", "EncoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel": [[41, 1, 1, "", "_compute_similarity"], [41, 1, 1, "", "_sentence_embedding"], [41, 1, 1, "", "compute_loss"], [41, 1, 1, "", "compute_score"], [41, 1, 1, "", "enable_input_require_grads"], [41, 1, 1, "", "encode"], [41, 1, 1, "", "gradient_checkpointing_enable"], [41, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner": [[42, 1, 1, "", "load_tokenizer_and_model"], [42, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.embedder.encoder_only.m3": [[46, 0, 1, "", "EncoderOnlyEmbedderM3Model"], [45, 0, 1, "", "EncoderOnlyEmbedderM3ModelArguments"], [46, 0, 1, "", "EncoderOnlyEmbedderM3ModelForInference"], [47, 0, 1, "", "EncoderOnlyEmbedderM3Runner"], [48, 0, 1, "", "EncoderOnlyEmbedderM3Trainer"], [45, 0, 1, "", "EncoderOnlyEmbedderM3TrainingArguments"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model": [[46, 1, 1, "", "_colbert_embedding"], [46, 1, 1, "", "_compute_similarity"], [46, 1, 1, "", "_dense_embedding"], [46, 1, 1, "", "_encode"], [46, 1, 1, "", "_get_queries_attention_mask"], [46, 1, 1, "", "_sparse_embedding"], [46, 1, 1, "", "compute_colbert_score"], [46, 1, 1, "", "compute_dense_score"], [46, 1, 1, "", "compute_loss"], [46, 1, 1, "", "compute_score"], [46, 1, 1, "", "compute_sparse_score"], [46, 1, 1, "", "enable_input_require_grads"], [46, 1, 1, "", "encode"], [46, 1, 1, "", "ensemble_score"], [46, 1, 1, "", "forward"], [46, 1, 1, "", "gradient_checkpointing_enable"], [46, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference": [[46, 1, 1, "", "forward"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner": [[47, 1, 1, "", "get_model"], [47, 1, 1, "", "load_tokenizer_and_model"], [47, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.reranker.decoder_only.base": [[30, 0, 1, "", "CrossDecoderModel"], [31, 0, 1, "", "DecoderOnlyRerankerRunner"], [32, 0, 1, "", "DecoderOnlyRerankerTrainer"], [52, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel": [[30, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner": [[31, 1, 1, "", "load_tokenizer_and_model"], [31, 1, 1, "", "load_trainer"], [31, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise": [[58, 0, 1, "", "CrossDecoderModel"], [59, 0, 1, "", "DecoderOnlyRerankerRunner"], [60, 0, 1, "", "DecoderOnlyRerankerTrainer"], [57, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel": [[58, 1, 1, "", "encode"], [58, 1, 1, "", "forward"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner": [[59, 1, 1, "", "load_tokenizer_and_model"], [59, 1, 1, "", "load_trainer"], [59, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.encoder_only.base": [[63, 0, 1, "", "CrossEncoderModel"], [64, 0, 1, "", "EncoderOnlyRerankerRunner"], [65, 0, 1, "", "EncoderOnlyRerankerTrainer"]], "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel": [[63, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner": [[64, 1, 1, "", "load_tokenizer_and_model"], [64, 1, 1, "", "load_trainer"]], "FlagEmbedding.inference": [[67, 0, 1, "", "FlagAutoModel"], [68, 0, 1, "", "FlagAutoReranker"]], "FlagEmbedding.inference.FlagAutoModel": [[67, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.FlagAutoReranker": [[68, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.embedder.decoder_only.base": [[69, 0, 1, "", "BaseLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder": [[69, 2, 1, "", "DEFAULT_POOLING_METHOD"], [69, 1, 1, "", "encode"], [69, 1, 1, "", "encode_corpus"], [69, 1, 1, "", "encode_queries"], [69, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.embedder.decoder_only.icl": [[70, 0, 1, "", "ICLLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder": [[70, 2, 1, "", "DEFAULT_POOLING_METHOD"], [70, 1, 1, "", "encode"], [70, 1, 1, "", "encode_corpus"], [70, 1, 1, "", "encode_queries"], [70, 1, 1, "", "encode_queries_single_device"], [70, 1, 1, "", "encode_single_device"], [70, 1, 1, "", "get_detailed_example"], [70, 1, 1, "", "set_examples"]], "FlagEmbedding.inference.embedder.encoder_only.base": [[72, 0, 1, "", "BaseEmbedder"]], "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder": [[72, 2, 1, "", "DEFAULT_POOLING_METHOD"], [72, 1, 1, "", "encode"], [72, 1, 1, "", "encode_corpus"], [72, 1, 1, "", "encode_single_device"], [72, 1, 1, "", "pooling"]], "FlagEmbedding.inference.embedder.encoder_only.m3": [[73, 0, 1, "", "M3Embedder"]], "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder": [[73, 2, 1, "", "DEFAULT_POOLING_METHOD"], [73, 1, 1, "", "colbert_score"], [73, 1, 1, "", "compute_lexical_matching_score"], [73, 1, 1, "", "compute_score"], [73, 1, 1, "", "compute_score_multi_process"], [73, 1, 1, "", "compute_score_single_device"], [73, 1, 1, "", "convert_id_to_token"], [73, 1, 1, "", "encode"], [73, 1, 1, "", "encode_corpus"], [73, 1, 1, "", "encode_queries"], [73, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.reranker.decoder_only.base": [[74, 0, 1, "", "BaseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker": [[74, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise": [[75, 0, 1, "", "LayerWiseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker": [[75, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight": [[76, 0, 1, "", "LightweightLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker": [[76, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.encoder_only.base": [[77, 0, 1, "", "BaseReranker"]], "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker": [[77, 0, 1, "", "compute_score_single_gpu"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "terms": {"": [7, 13, 15, 16, 18, 21, 36, 41, 46, 47, 53, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 101, 103, 104, 105, 106, 108, 110, 111, 112], "0": [3, 4, 5, 9, 18, 21, 29, 34, 35, 36, 41, 45, 46, 52, 53, 57, 74, 75, 76, 89, 90, 94, 98, 99, 100], "00": [90, 92, 103, 104, 108], "000": 103, "00000004": 89, "00000005": 89, "00016697": 90, "00089447": 90, "001": 104, "00146474": 90, "00310114": 90, "00329455": 90, "00368039": 90, "0043185e": 90, "00599566": 90, "00683443": 81, "00755427": 90, "0075684": 90, "00756918": 81, "00786822": 90, "00790005": 81, "00805702": 90, "00806659": 81, "00819298": 90, "00880391988903284": 92, "0093503": 90, "00991": 104, "00996143": 90, "01": [100, 108], "01041734": 90, "010771302313529425": 104, "010771302313530132": 104, "01113793": 90, "01337725": 90, "01374448": 90, "01503995": 90, "01651684": 90, "01709837": 90, "01715658": 90, "01777726": 90, "01805054": 90, "01843987": 90, "02": [45, 90, 91, 103], "02270943": 81, "02311821": 90, "02357143": 81, "02385841": 90, "02397249": 90, "02429199": 90, "02575599": 90, "02722942": 90, "02838556": 81, "02961654": 90, "02993429": 90, "03": [90, 91, 98, 104], "03038301": 81, "03216": 111, "03260205": 90, "03411707": 90, "03611493": 81, "036222943297402846": 104, "0371782e": 91, "0377209694331257": 104, "037720969433127145": 104, "0379632e": 90, "03835309": 90, "03855301": 90, "038790629929866066": 104, "03879062992990034": 104, "0389353e": 90, "03919311": 90, "039217": 90, "03977485677045894": 104, "039774856770459645": 104, "03988946": 90, "04": [90, 91, 100], "040755156": [90, 92], "04147115653921931": 104, "04356123278888682": 104, "04374858": 81, "04479263": 90, "0449261e": 90, "045134712": [90, 92], "04707828": 90, "04716": 104, "04828531": 90, "05": [45, 90, 91, 92], "050144322": [90, 92], "05022853": 90, "05069073": 90, "05281549383775287": 104, "05432154580979357": 104, "05457945565481172": 104, "05474931": 90, "05985384": 90, "060962623117325254": 104, "06255283252590663": 104, "06259296677860492": 104, "06342201": [90, 92], "06389635013430676": 104, "06396189194646361": 104, "06509776": 90, "06690213479396273": 104, "06it": 104, "07185174301688693": 104, "07364476417961506": 104, "07404093236468848": 104, "07501290390362861": 104, "07507962333910836": 104, "07692307692307693": 94, "077": 94, "08": 45, "081469566": [90, 92], "08164985279853691": 104, "082762718200684": 94, "083": 94, "08333333333333333": 94, "08362077": [90, 92], "088312": 100, "08841": 104, "09038": 98, "09705499215630589": 104, "09824591983546396": 104, "1": [4, 5, 18, 21, 29, 34, 35, 36, 41, 45, 46, 47, 52, 53, 57, 73, 76, 85], "10": [18, 81, 90, 92, 95, 97, 100, 101, 103, 108, 110], "100": [10, 18, 21, 90, 92, 95, 101, 103, 104, 108, 110], "1000": [18, 21, 98, 99, 100, 104, 111, 112], "10000": 101, "1000000": 101, "100000000": [3, 9, 34], "101": 91, "102": 91, "1024": [18, 21, 89, 92, 94], "10292184602358935": 104, "10292184602358977": 104, "102m": [85, 90], "104": 100, "1045": 91, "104569": 100, "106": 101, "107": 100, "10744937823276134": 104, "10744937823276193": 104, "109m": [85, 90], "10k": 21, "11": [91, 95, 98, 100, 101], "110": 101, "111": [90, 98], "112": 98, "11284619565817842": 104, "113": 98, "114": 100, "11598700704312062": 104, "116": [98, 100], "11679": 90, "117": [98, 100], "11min": 101, "12": [90, 91, 100, 101, 104], "122": 100, "12347288098914058": 104, "124": 100, "12457339152558143": 104, "125": 100, "128": [3, 4, 9, 10, 16, 34, 35, 74, 75, 76, 77, 99, 100, 101], "12807325096717753": 104, "12841084787822227": 104, "12898192060943495": 104, "12942556865700913": 104, "12964639": [90, 92], "12964855554504057": 104, "12969109830101241": 104, "13": [95, 98, 100, 101], "130": 100, "1300413865104607": 104, "13097093150054095": 104, "131": 100, "13118224861025093": 104, "13164524259533786": 104, "13168797291549253": 104, "13241573571401533": 104, "133": [85, 90], "1340775377068567": 104, "13440904793529648": 104, "1346130730317385": 104, "135": 100, "13522755012490456": 104, "13522755012490692": 104, "1355361594910923": 104, "13689369": [90, 92], "137": 100, "1378988612808882": 104, "13794450668758515": 104, "138": 100, "1382786098284509": 104, "13914318784294258": 104, "1396047981645623": 104, "14": [95, 100, 101, 104, 110], "14012953903010958": 104, "14012953903010988": 104, "1404708e": 90, "141": 100, "1410889527057097": 104, "14108895270570979": 104, "144": 100, "14726476953035533": 104, "149": 101, "14976954460144": 104, "15": [100, 101, 104, 110], "150": [101, 110, 111, 112], "15149": 104, "15236205846534961": 104, "15256475371124711": 104, "1536": 89, "1557795701081579": 104, "156": 100, "15610387932529113": 104, "15620049317363813": 104, "158": 100, "158875": 98, "15919987960292029": 104, "15930478114759905": 104, "15934819555197366": 104, "15956349246366208": 104, "16": [18, 29, 34, 52, 57, 95, 98, 99, 100, 101], "1604091882521101": 104, "16057318234658585": 104, "161": 100, "162": 100, "16231721725673165": 104, "163": 100, "1657018523692905": 104, "166": 100, "167": 100, "16823918613191954": 104, "16823918613192046": 104, "169": [100, 101], "17": [95, 101, 104], "170": 100, "17001738": [90, 92], "172": 100, "17346152653542332": 104, "175": 100, "176": 100, "179": 100, "17953": 91, "17min": 101, "18": [18, 95, 98, 101, 111], "180": 100, "1800": 45, "184": 100, "186": 100, "187": 100, "188": [99, 100], "189": 100, "19": 95, "192": 100, "193": 100, "19554448500275612": 92, "197": 99, "199": [99, 100], "1998": 91, "1e": [45, 91, 92], "1min": 101, "1st": 85, "2": [18, 76, 89], "20": [21, 95, 100, 101, 103, 110], "201": 100, "2023": [18, 85], "205": 100, "206": 100, "2082448e": 90, "21": [95, 100, 101, 103, 108], "210": 100, "21061528": 89, "2125367e": 90, "214": 100, "215": 100, "218": [100, 101], "219": 100, "22": [95, 101, 103, 108], "220": 100, "221": 100, "22238": 104, "22279659689895054": 104, "22279659689895104": 104, "2251": 98, "226": 100, "228": 100, "228780": 90, "229": 100, "2293": 91, "22it": 90, "23": [92, 95], "23025740175221762": 104, "23025740175221865": 104, "232": 100, "2320": 90, "233": 100, "2359587e": 90, "2361": 91, "237": 100, "238": 100, "24": [92, 95], "240131": 92, "2402": 111, "241": 100, "245": 100, "247": 100, "24906276": 89, "24b": 108, "24m": [85, 90], "25": [92, 95, 110], "250002": 92, "251": 100, "25167602": [90, 92], "25186998": [90, 92], "255": 100, "256": [15, 16, 69, 70, 72, 73, 90, 100, 103, 108], "257435": 99, "2588": 90, "26": [21, 95, 98], "260": 104, "262": 90, "26957875": [90, 92], "26it": 104, "27": [90, 100], "272": 104, "27280585498859483": 92, "276": 90, "278m": 108, "28": [95, 100], "2811369e": 90, "2842189e": 90, "2892313928157665": 104, "2892313928157675": 104, "29": 98, "2911752e": 90, "2998275e": 91, "2b": 108, "2min": 101, "3": [45, 46, 74, 75, 76, 77, 85, 89, 91, 100], "30": [90, 92, 95, 100, 101, 110], "300": 110, "30057": 98, "30502": 98, "30522": 91, "3072": 91, "31": [98, 101], "31969923": 89, "32": [3, 4, 9, 10, 34, 35, 90, 99, 100, 101, 105, 106], "3211860920443005": 104, "32118609204433185": 104, "3214332e": 91, "32672375": 81, "326m": [85, 90], "327": 81, "3298163165186628": 95, "33": [85, 90, 98, 100], "330": 100, "333": 94, "3333333333333333": 94, "33353207": [90, 92], "335": 90, "335m": [85, 90], "34": [85, 90, 100], "342316": 98, "345639616995194": 104, "3456396169952022": 104, "34739798": 89, "34749585": 92, "349868": 92, "35": [100, 106], "35350388": 81, "354": 81, "3577225e": 90, "35it": 108, "36": [101, 104], "363": 90, "36308263419153386": 104, "3630826341915611": 104, "3666666666666667": 95, "36792332": 81, "368": 81, "3698": 91, "37": 101, "3767978": 97, "37858668": 97, "384": 89, "3894034e": 90, "3911421e": 90, "392": 99, "3924331e": 91, "39290053": 81, "393": 81, "394": 81, "39446455": 81, "3f": 81, "3min": 101, "4": [11, 30, 58, 63, 74, 75, 76, 77, 100], "40": 110, "400": 110, "40196604": 81, "402": 81, "40754": 104, "4083": 91, "409": [85, 90], "4091221e": 90, "4096": 92, "41": [100, 104], "4139402560455192": 104, "419": 101, "42": [45, 100], "42427146": 97, "43": 100, "438": [85, 90], "44": [100, 104], "44429": 98, "45": 100, "4549762e": 91, "46": [100, 101], "4621177911758423": 92, "4626108": 81, "463": 81, "4667": 91, "471": [99, 100], "4740132817599919": 104, "4740132817600036": 104, "474676132202148": 108, "47721898396760526": 104, "4772189839676386": 104, "48": 100, "4865": 90, "4884483e": 90, "49": [98, 100], "4m": [85, 90], "4o": [110, 111, 112], "4x": 100, "5": [81, 89, 91, 92, 99, 100, 104, 105, 106, 110, 111, 112], "50": 110, "500": [45, 97, 110], "5000": [103, 108], "5030322e": 90, "5092714e": 91, "5097007": 97, "51": 100, "512": [3, 15, 16, 69, 70, 72, 73, 74, 75, 76, 77, 90, 91], "51932": 104, "51b": 108, "52": 100, "5208629682313899": 104, "521": 100, "527691": 97, "528": 81, "5284606": 81, "5331": [103, 108], "5337047390639782": 92, "54023": 104, "5409331": 97, "5429113323850182": 104, "5475257e": 90, "55": 100, "550": 101, "5543230e": 90, "55717": 104, "55773": 104, "56": [98, 100, 104, 105], "5603739077423295": 104, "560m": 108, "56202": 104, "563260143484355911": 21, "56344": 104, "56347": 104, "564661930998293": 104, "5660817425350153": 104, "5661121884705748": 104, "568": 101, "5684842": 90, "568m": [90, 108], "57": 100, "5703944e": 91, "57525384": 89, "58": 101, "5845405e": 90, "5856720000000037": 101, "5895271e": 90, "59": [100, 108], "59190154": 89, "5931472182273865": 94, "59364545": 97, "59461": 104, "595": 101, "5955665344840209": 95, "598": 101, "5983": 90, "5989914": 90, "5e": 45, "6": [81, 90, 91, 94, 95, 98, 100, 103, 106], "60": 110, "600": 110, "602461": 100, "603": 81, "6031525": 81, "6062041": 97, "6077381": 91, "608": 81, "6082418": 81, "62": 101, "6210502": 89, "625": 94, "6252808e": 100, "6259035": 92, "63": 100, "630898999999999": 101, "63276503": 89, "63616": 104, "64": [29, 34, 52, 57, 100, 101], "64720015": 89, "6511828e": 100, "65131": 104, "6561864e": 90, "658928": 99, "660": 101, "66063": 104, "6613": 104, "6658131e": 100, "6666666666666666": 95, "66714": 104, "6686779": 97, "6726490e": 90, "6754939e": 90, "6782462": 92, "68": [94, 100, 108], "6840411e": 91, "6852231e": 90, "6860173e": 90, "69": 101, "697673": 89, "7": [81, 90, 94, 95, 97, 101, 105], "70": 100, "71": 100, "714613139629364": 94, "7206438e": 91, "7268854e": 90, "72b": 108, "736794": 90, "74": 100, "742325": 98, "7446640729904175": 94, "7461165": 90, "746731": 100, "75747": 104, "76226806640625": 108, "768": [81, 89, 91, 97, 98, 99, 100, 103, 108, 110, 112], "7761475e": 91, "7796662449836731": 92, "7861": 91, "7900386": 89, "7min": 101, "8": [3, 9, 34, 45, 57, 58, 76, 81, 85, 90, 91, 92, 95, 97, 98, 99, 100, 101], "80": 101, "802726686000824": 94, "8055555555555555": 95, "8074074074074075": 95, "8192": [90, 92], "8194": 92, "823843240737915": 108, "823908": 100, "8240882158279419": 94, "8270": 91, "83": 90, "831": 101, "8333333333333334": 95, "8384371e": 90, "84": [100, 101], "8417887e": 91, "8445771e": 90, "8462474": 90, "849915": 98, "85341793": 90, "862962962962963": 95, "87": [100, 101], "8714428e": 90, "8721525e": 91, "87282517": 89, "8765034e": 90, "88": 100, "88407": 104, "8921868e": 90, "8961012e": 90, "8963409999999716": 101, "89705944": 90, "899": 100, "9": [45, 81, 90, 91, 95, 97, 98, 108], "90": 100, "90017": 90, "90914035": 90, "91": 100, "911423": 100, "9166666666666666": 95, "91it": [92, 103], "93": 100, "9331330e": 90, "94": [98, 101], "9431": 104, "946": 100, "95": [85, 90], "96": 34, "97": [103, 108], "9803897e": 90, "9825": [103, 108], "9869253606521631": [103, 108], "99": 108, "990444999999872": 101, "9905590e": 90, "99147": 104, "995": 108, "9963092975357145": 108, "99644": 104, "999": 45, "9999189999999997": 101, "9999997": [89, 91], "99999976": 89, "9999998": 89, "9999999": [89, 91], "99999994": 89, "99999997": 89, "99999998": 89, "99999999": 89, "9b": 108, "9min": 101, "A": [5, 7, 10, 13, 15, 16, 46, 47, 73, 74, 75, 76, 89, 90, 94, 97, 105, 106, 110, 111, 112], "And": [81, 94, 95, 97, 98, 101, 105], "As": [91, 101], "But": [89, 94, 99, 101], "By": [7, 13, 98, 111, 112], "For": [80, 89, 90, 91, 94, 99, 100, 101, 104, 105, 106, 108, 111, 112], "If": [5, 7, 13, 15, 16, 36, 41, 46, 47, 53, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 90, 91, 92, 97, 98, 103, 110, 111, 112], "In": [81, 90, 91, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "It": [15, 16, 90, 91, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 112], "No": [89, 97], "One": [4, 35, 81], "Or": [18, 21, 106, 111], "That": [89, 99, 111], "The": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 18, 30, 35, 36, 37, 41, 46, 53, 58, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 85, 89, 90, 91, 92, 94, 95, 98, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "Their": 89, "Then": [85, 89, 91, 92, 94, 95, 97, 99, 100, 101, 104, 105, 106, 110, 111, 112], "There": [87, 89, 94, 98, 99], "These": 110, "To": [89, 90, 91], "With": 112, "_": [81, 95, 98, 103, 108], "__init__": 106, "_colbert_embed": [25, 26, 39, 44, 46], "_compute_cross_device_neg_loss": [0, 1, 2, 5], "_compute_in_batch_neg_loss": [0, 1, 2, 5], "_compute_no_in_batch_neg_loss": [0, 1, 2, 5], "_compute_similar": [25, 26, 27, 33, 36, 39, 40, 41, 44, 46, 49, 50, 51, 53], "_concatenate_results_from_multi_process": [0, 14, 15], "_create_batch_data": [0, 1, 2, 4, 25, 26, 27, 33, 35], "_dense_embed": [25, 26, 39, 44, 46], "_description_": [46, 73], "_dist_gather_tensor": [0, 1, 2, 5], "_encod": [25, 26, 39, 44, 46, 90, 91], "_encode_multi_process_work": [0, 14, 15, 16], "_get_file_batch_s": [0, 1, 2, 4], "_get_queries_attention_mask": [25, 26, 39, 44, 46], "_get_train_group_s": [0, 1, 2, 4], "_i": 95, "_load_dataset": [0, 1, 2, 4, 8, 10], "_sentence_embed": [25, 26, 27, 33, 36, 39, 40, 41, 49, 50, 51, 53], "_shuffle_text": [0, 1, 2, 4, 8, 10], "_sparse_embed": [25, 26, 39, 44, 46], "_summary_": [46, 77], "_type_": 46, "a_i": 94, "a_norm": 94, "abc": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16], "abil": [70, 85, 90, 105, 106], "abl": 111, "about": [81, 94, 99, 101, 105, 110, 111, 112], "abov": [81, 95, 99], "absargu": [0, 1, 2, 8], "absdataset": [0, 1, 2, 8], "absembedd": [0, 14, 67], "absembeddercol": [0, 1, 2, 6], "absembedderdataargu": [0, 1, 4, 6, 8, 9, 42, 47, 54], "absembeddermodel": [0, 1, 2, 6, 7, 31, 37, 42, 47, 54, 59, 64], "absembeddermodelargu": [0, 1, 6, 8, 9, 42], "absembedderrunn": [0, 1, 2, 6], "absembeddersamedatasetcol": [0, 1, 2, 25, 26, 27, 33], "absembeddersamedatasettraindataset": [0, 1, 2], "absembeddertrain": [0, 1, 2], "absembeddertraindataset": [0, 1, 2, 6], "absembeddertrainingargu": [4, 6, 37, 42, 54], "absllmrerankercol": [0, 1, 8], "absllmrerankertraindataset": [0, 1, 8], "absmodel": [0, 1, 2, 8], "absrerank": [0, 14, 68], "absrerankercol": [0, 1, 8, 12], "absrerankerdataargu": [0, 1, 2, 3, 10, 12, 31, 59, 64], "absrerankermodel": [0, 1, 8, 12, 13, 31, 59, 64], "absrerankermodelargu": [0, 1, 2, 3, 12, 64], "absrerankerrunn": [0, 1, 8, 12], "absrerankertrain": [0, 1, 8], "absrerankertraindataset": [0, 1, 8, 12], "absrerankertrainingargu": [12, 31, 59, 64], "absrunn": [0, 1, 2, 8], "abstract": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 58], "abstrain": [0, 1, 2, 8], "academi": [81, 87, 90], "acceler": [89, 92, 108], "accelerator_config": 45, "accept": [97, 99, 101, 105], "acclaim": [81, 97], "accomplish": [89, 110, 112], "accord": [67, 68, 81, 90, 105, 106], "accur": [108, 111], "accuraci": 99, "acoust": 89, "across": [18, 21, 73, 89, 95, 103, 104], "acrross": 98, "activ": [11, 36, 41, 46, 53, 91, 92], "actor": [81, 97], "actual": [10, 95, 103], "ad": [92, 97, 99, 100, 101], "adafactor": 45, "adam_beta1": 45, "adam_beta2": 45, "adam_epsilon": 45, "adamw_torch": 45, "add": [90, 97, 98, 99, 100, 101, 103, 108, 110], "addit": [15, 16, 111], "additional_special_token": [29, 34], "adjust": [36, 41, 46, 53, 98], "adopt": [105, 106, 111], "advanc": 89, "advantag": 89, "advis": [15, 16], "afqmc": 106, "after": [4, 35, 72, 81, 98, 99, 105, 106, 108], "aggreg": 112, "ai": [81, 97, 110], "ailuropoda": 108, "aim": 87, "al": 98, "alexnet": 81, "algorithm": [99, 100], "alias": 21, "align": 21, "all": [5, 7, 13, 15, 16, 81, 89, 94, 95, 97, 99, 103, 105, 106, 110, 111, 112], "all_scor": 5, "allevi": [85, 90], "alloc": 98, "allow": [99, 108], "almost": 98, "along": [15, 16, 70, 89], "alreadi": [94, 97, 99, 101, 103, 105], "also": [7, 13, 18, 89, 90, 98, 101, 104, 105, 110, 112], "altern": 105, "altman": [81, 97], "am": 94, "amazoncounterfactualclassif": 105, "amazonpolarityclassif": 105, "amazonreviewsclassif": 105, "american": 110, "amid": 110, "amount": [89, 98, 99, 101, 111, 112], "an": [4, 15, 16, 18, 21, 81, 89, 92, 97, 99, 101, 103, 104, 105, 106, 110, 111, 112], "analysi": 112, "analyz": 112, "andrew": [81, 97], "angl": 94, "ani": [10, 15, 16, 46, 69, 70, 72, 73, 74, 75, 76, 77, 81, 99, 101], "ann": [99, 101], "anna": 94, "anoth": [74, 75, 76, 99], "answer": [21, 81, 90, 103, 108, 110, 111, 112], "ap": 95, "ap_sum": 95, "api": [89, 90, 91, 110, 111, 112], "appear": [81, 89, 92, 106], "append": [95, 103, 108], "appli": 99, "applic": [101, 104, 111, 112], "approach": [89, 98], "appropri": [4, 6, 12, 67, 68], "approxim": [99, 100], "ar": [18, 75, 76, 81, 85, 87, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "architectur": [89, 108], "area": 87, "arg": [4, 7, 10, 11, 13, 32, 35, 38, 43, 48, 55, 60, 65, 106], "arguana": [104, 105], "argument": [3, 4, 6, 9, 10, 12, 25, 26, 27, 28, 31, 33, 35, 37, 39, 44, 47, 49, 50, 51, 54, 56, 59, 103], "arrai": [15, 67, 69, 70, 72, 73, 90, 95, 103, 108, 110], "arri": 73, "artifici": [87, 90], "artist": [81, 97], "artistri": 110, "arxiv": 111, "arxivclusteringp2p": 105, "arxivclusterings2": 105, "as_query_engin": 112, "as_retriev": 111, "asarrai": [89, 103, 108], "asia": 108, "ask": [111, 112], "askubuntudupquest": 105, "aspect": 101, "assembl": [91, 111], "assert": 98, "assess": 104, "assign": [99, 105, 106], "assist": 110, "assum": [95, 103], "astonish": [81, 97], "astyp": [95, 97, 98, 103, 108], "atec": 106, "ation": 92, "atmospher": 110, "attent": [46, 72, 91, 92], "attention_mask": [36, 41, 46, 53, 72, 91], "attribut": [73, 103, 112], "aug": 85, "augment": 90, "authent": 110, "auto": 45, "auto_find_batch_s": 45, "automat": [67, 68, 90, 100], "automodel": [36, 41, 46, 53, 91, 92], "autotoken": [5, 11, 30, 36, 41, 46, 53, 58, 63, 91, 92], "avail": [105, 108, 110], "averag": [92, 95, 105, 106], "avg": 110, "avoid": [4, 35, 99], "award": [81, 97], "b": [74, 75, 76, 92, 94], "b_i": 94, "b_norm": 94, "baai": [18, 21, 81, 85, 86, 89, 91, 92, 94, 97, 103, 104, 105, 106, 108, 110, 111, 112], "back": 73, "bag": [89, 92], "bake": 94, "balanc": [85, 101], "banh": 110, "banking77classif": 105, "bar": 110, "base": [5, 6, 11, 12, 15, 16, 25, 26, 27, 29, 30, 31, 32, 36, 38, 39, 41, 42, 43, 46, 49, 50, 52, 53, 54, 55, 60, 61, 63, 64, 65, 69, 72, 74, 75, 76, 77, 81, 85, 89, 90, 91, 92, 97, 99, 103, 104, 105, 106, 108, 110, 111, 112], "base_model": [5, 11, 30, 36, 41, 46, 53, 58, 63], "baseembedd": [66, 71], "basellmembedd": [66, 69, 71], "basellmrerank": [66, 78], "basererank": [66, 78], "basic": [87, 98, 104], "basketbal": 89, "batch": [4, 5, 10, 11, 15, 16, 30, 35, 36, 41, 46, 53, 58, 63, 69, 70, 72, 73, 74, 75, 76, 77, 91, 104, 105, 106], "batch_eval_metr": 45, "batch_raw_data": [4, 35], "batch_siz": [15, 16, 69, 70, 72, 73, 74, 75, 76, 77, 90, 103, 106, 108], "bcd": 110, "bear": 108, "becaus": [94, 99, 101, 111], "becom": 100, "beef": 110, "befor": [89, 94, 97, 99, 100, 101, 108], "begin": 91, "behavior": [7, 13], "beij": [87, 90], "being": [7, 13, 112], "beir": [104, 105, 106], "below": [81, 97, 104, 106, 110, 111, 112], "benchmark": [85, 101, 104, 105, 106], "benefici": [81, 97], "bert": [89, 90, 91], "bertattent": 91, "bertembed": 91, "bertencod": 91, "bertintermedi": 91, "bertlay": 91, "bertmodel": 91, "bertoutput": 91, "bertpool": 91, "bertselfattent": 91, "bertselfoutput": 91, "besid": [87, 98], "best": [81, 97, 101], "better": [89, 108], "between": [18, 36, 41, 46, 53, 81, 85, 89, 92, 94, 95, 100, 105, 106, 111, 112], "bf16": [45, 74, 75, 76], "bf16_full_ev": 45, "bge": [18, 21, 70, 73, 81, 86, 87, 94, 97, 103, 104, 105, 106, 108, 110, 111, 112], "bgem3flagmodel": [90, 92], "bia": [91, 92], "bidecoderonlyembeddericlmodel": [25, 26, 27, 33, 36], "bidecoderonlyembeddermodel": [25, 49, 50, 51, 53], "biencoderonlyembeddermodel": [25, 26, 39, 40, 41], "bin": [97, 103], "binari": [95, 99, 105, 106], "biorxivclusteringp2p": 105, "biorxivclusterings2": 105, "bioss": 105, "bit": 100, "bm": 92, "bm25": [89, 90, 92], "bn": 18, "bool": [3, 4, 5, 7, 9, 10, 13, 15, 16, 29, 34, 35, 36, 41, 45, 46, 47, 52, 53, 57, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "bot": [110, 111, 112], "both": [5, 7, 13, 94, 95, 103, 108, 110], "bourbon": 110, "bow": 89, "bq": 106, "brad": [81, 97], "break": [81, 95, 97, 103, 108], "brief": 110, "brute": 101, "bucket": [99, 100], "build": [87, 97, 99, 110, 111, 112], "built": 98, "bunch": 110, "burden": 101, "c": [81, 85, 95, 97, 98, 99, 100, 101, 103, 108], "c22ab2a51041ffd869aaddef7af8d8215647e41a": 104, "c_mteb": 106, "cach": [18, 21, 47, 69, 70, 72, 73, 74, 75, 76, 77], "cache_dir": [3, 9, 18, 21, 29, 34, 45, 47, 52, 57, 69, 70, 72, 73, 74, 75, 76, 77], "cache_path": [3, 9, 18, 21, 34], "calc_ap": 95, "calc_map": 95, "calc_mrr": 95, "calc_precis": 95, "calc_recal": [95, 103, 108], "calcul": [94, 95, 100, 103, 108], "call": [4, 5, 11, 46, 58, 90, 104, 108, 112], "callabl": [7, 13, 32, 38, 43, 48, 55, 60, 65], "callback": [4, 7, 13, 32, 38, 43, 48, 55, 60, 65], "can": [15, 16, 18, 21, 74, 75, 76, 80, 81, 89, 90, 91, 92, 94, 97, 98, 99, 100, 101, 103, 105, 106, 110, 111, 112], "candid": 92, "cap": [92, 94, 95], "capabl": [95, 103, 108, 111], "capsul": 112, "captur": [89, 90, 91, 92, 104, 105], "care": [94, 105], "case": [89, 91, 94, 97, 98, 99, 103, 105, 111, 112], "casual": 110, "cat": [89, 108], "caus": [94, 99], "caution": 105, "cd": 80, "cdist": 94, "cdot": [92, 94], "cell": [89, 90, 91, 97, 99, 100, 101, 103, 111, 112], "centroid": 100, "ceo": [81, 97], "certain": 89, "chain": [110, 111], "challeng": 18, "chanc": 94, "chang": [18, 21, 97, 105, 106], "charact": [89, 111, 112], "chat": [90, 110, 111, 112], "chat_model": 111, "chatbot": [110, 111], "chatopenai": 111, "chatprompttempl": 111, "check": [89, 90, 91, 97, 98, 99, 104, 105, 106, 111, 112], "checkout": 108, "checkpoint": [11, 36, 41, 46, 53], "chees": 110, "chef": 110, "cheli": 110, "chick": 110, "chicken": 110, "child": [67, 68], "children": [15, 16], "china": 108, "chines": [85, 90, 106, 108, 110], "chinesetasklist": 106, "chmod": [18, 21], "choic": [89, 91, 98, 99, 100, 101, 103, 110, 112], "choos": [67, 68, 76, 81, 99, 103, 106, 111], "chose": 104, "chosen": [92, 104, 112], "chunk": [111, 112], "chunk_overlap": [111, 112], "chunk_siz": [111, 112], "cinemat": [81, 97], "cl": [41, 45, 46, 72, 73, 91, 92, 106], "class": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 90, 98, 100, 103, 104, 106], "classic": 110, "classif": [89, 105, 106], "classmethod": [67, 68], "clean": 111, "clear": 94, "client": [89, 110], "climatefev": [104, 105], "clone": 80, "cloner": 98, "close": [94, 110], "closer": [89, 94], "closest": [99, 100], "clsclusteringp2p": 106, "clsclusterings2": 106, "club": [81, 97], "cluster": [89, 99, 100, 105, 106], "cmedqaretriev": 106, "cmedqav1": 106, "cmedqav2": 106, "cmnli": 106, "co": [92, 94, 97, 98], "cobert": 73, "cobert_dim": 73, "cocktail": 110, "code": [87, 91, 98, 99], "codebook": 100, "coeffici": 94, "coher": 89, "colber": 46, "colbert": [46, 47, 73, 90, 92], "colbert_dim": [45, 47, 73], "colbert_scor": [46, 66, 71, 73, 92], "colbert_vec": [73, 90, 92], "colbert_weight": 46, "collat": [4, 6, 10, 12, 35], "collect": [89, 90], "collis": 99, "com": [80, 101], "combin": [15, 16, 70, 98, 101], "combine_docu": 111, "come": [21, 89, 110], "comfort": 110, "command": [105, 106], "common": [90, 99], "commonli": [91, 112], "commun": [89, 111], "compar": [94, 95, 99, 103, 105], "comparison": 101, "compet": 104, "competit": [85, 90], "compl": [4, 35], "complet": [15, 16, 70, 108, 110, 112], "complex": [89, 101, 112], "compliment": 110, "composit": 98, "compress": [76, 99, 100, 108], "compress_lay": 76, "compress_ratio": 76, "compris": [21, 105, 106], "comput": [5, 7, 11, 13, 15, 16, 36, 41, 46, 53, 58, 67, 68, 69, 72, 73, 74, 75, 76, 77, 81, 89, 90, 92, 94, 95, 97, 99, 100, 101, 105, 108], "compute_cod": 100, "compute_colbert_scor": [25, 26, 39, 44, 46], "compute_dense_scor": [25, 26, 39, 44, 46], "compute_lexical_matching_scor": [66, 71, 73, 92], "compute_local_scor": [0, 1, 2, 5], "compute_loss": [0, 1, 2, 5, 7, 8, 11, 13, 25, 26, 27, 33, 36, 39, 40, 41, 44, 46, 49, 50, 51, 53], "compute_metr": [7, 13, 32, 38, 43, 48, 55, 60, 65], "compute_recal": 101, "compute_scor": [0, 1, 2, 5, 14, 16, 25, 26, 27, 33, 36, 39, 40, 41, 44, 46, 49, 50, 51, 53, 66, 71, 73, 108], "compute_score_func": 5, "compute_score_multi_process": [66, 71, 73], "compute_score_single_devic": [66, 71, 73], "compute_score_single_gpu": [0, 14, 16, 66, 74, 75, 76, 77, 78], "compute_sparse_scor": [25, 26, 39, 44, 46], "comupt": 92, "comuput": 100, "concaten": [5, 15, 16, 90], "concis": [81, 97, 105], "conclus": 94, "conda": [97, 98, 99, 100, 101], "config": [15, 16, 74, 75, 76], "config_nam": [3, 9, 29, 34, 45, 52, 57], "congrat": 103, "connect": [89, 99, 112], "consid": [89, 95, 99, 101, 103], "consider": 94, "construct": [99, 111, 112], "consum": [97, 99, 103, 105], "consumpt": 10, "contain": [10, 15, 16, 18, 46, 47, 87, 91, 95, 97, 98, 100, 103, 104, 105, 106, 108, 111, 112], "content": [87, 104, 105, 106, 110, 111], "context": [89, 90, 108, 111, 112], "context_str": 112, "continuum": 18, "contribut": [81, 97], "control": [4, 5, 36, 41, 46, 53, 98], "convers": [10, 90], "convert": [73, 91], "convert_id_to_token": [66, 71, 73, 92], "convert_to_numpi": [15, 69, 70, 72, 90, 91, 110], "convini": 94, "convsearch": 90, "coordin": 94, "copi": [105, 106], "core": 112, "corpu": [15, 69, 70, 72, 73, 81, 89, 90, 95, 97, 98, 101, 103, 105, 106, 108, 110, 111], "corpus_embd": [18, 21], "corpus_embd_save_dir": [18, 21], "corpus_embed": [81, 97, 103, 108], "corpus_s": 98, "correct": [91, 94, 111], "correctli": [95, 103, 111], "correl": [105, 106], "correspond": [81, 90, 91, 98, 100, 103], "cos_1": 94, "cos_dist1_2": 94, "cos_dist1_3": 94, "cosin": [105, 106], "cosine_similar": 94, "cost": [89, 92, 99, 103, 110], "could": [81, 89, 99, 111, 112], "courpu": [81, 97], "cours": [81, 97, 110], "coursera": [81, 97], "cover": [81, 95, 101, 104], "coverag": 99, "covidretriev": 106, "cpu": [15, 16, 99, 100, 101, 103, 108, 110], "cqadupstack": 104, "cqadupstackandroidretriev": [104, 105], "cqadupstackenglishretriev": [104, 105], "cqadupstackgamingretriev": [104, 105], "cqadupstackgisretriev": [104, 105], "cqadupstackmathematicaretriev": [104, 105], "cqadupstackphysicsretriev": [104, 105], "cqadupstackprogrammersretriev": [104, 105], "cqadupstackstatsretriev": [104, 105], "cqadupstacktexretriev": [104, 105], "cqadupstackunixretriev": [104, 105], "cqadupstackwebmastersretriev": [104, 105], "cqadupstackwordpressretriev": [104, 105], "crab": 110, "craft": 110, "creat": [4, 10, 35, 81, 89, 97, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "create_meta": [105, 106], "create_one_exampl": [0, 1, 8, 10], "create_retrieval_chain": 111, "create_stuff_documents_chain": 111, "creation": 101, "creativ": 110, "cross": [5, 36, 41, 46, 53, 108], "crossdecodermodel": [25, 26, 27, 28, 30, 49, 50, 56, 58], "crossencodermodel": [25, 49, 61, 62, 63], "crucial": [99, 100, 103, 104], "cuda": [18, 21, 74, 75, 76], "cuisin": 110, "culinari": 110, "cumul": [95, 103], "cup": [18, 94], "current": [4, 11, 35, 36, 41, 46, 53, 95], "curri": 110, "curs": [89, 99], "custom": [7, 13, 15, 16, 110, 112], "cut": 110, "cut_off": [103, 108], "cutoff": [81, 95, 103, 104, 108], "cutoff_lay": [75, 76], "d": [91, 94, 98, 99, 100, 101, 103, 108, 110], "da": 110, "dai": [89, 108], "daili": [105, 106, 110], "danc": [81, 97], "data": [3, 4, 6, 9, 10, 12, 18, 21, 31, 34, 35, 37, 47, 54, 59, 74, 75, 76, 77, 89, 97, 99, 100, 101, 103, 108], "data_arg": [6, 12, 31, 37, 42, 47, 54, 59, 64], "data_col": [7, 13, 32, 38, 43, 48, 55, 60, 65], "data_se": 45, "data_url": 101, "databas": [111, 112], "datacol": [7, 13, 32, 38, 43, 48, 55, 60, 65], "dataload": [74, 75], "dataloader_drop_last": 45, "dataloader_num_work": [4, 35, 45], "dataloader_persistent_work": 45, "dataloader_pin_memori": 45, "dataloader_prefetch_factor": 45, "dataset": [4, 6, 7, 10, 12, 13, 18, 21, 25, 26, 27, 32, 33, 37, 38, 43, 48, 55, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 81, 89, 91, 95, 98, 99, 104, 105, 111, 112], "dataset_dir": [18, 21], "dataset_nam": [18, 21], "dataset_revis": 104, "datset": 4, "dave": 21, "db": 111, "dbpedia": [104, 105], "dcg": [95, 103], "dcg_p": [95, 103], "ddp_backend": 45, "ddp_broadcast_buff": 45, "ddp_bucket_cap_mb": 45, "ddp_find_unused_paramet": 45, "ddp_timeout": 45, "de": 92, "debug": 45, "debug_util": 45, "debugopt": 45, "decis": 4, "decod": [25, 26, 29, 30, 31, 34, 36, 37, 49, 52, 53, 54, 57, 58, 59, 69, 74, 75, 76, 99], "decoder_onli": [29, 30, 31, 32, 34, 35, 36, 37, 38, 52, 53, 54, 55, 57, 58, 59, 60, 69, 70, 74, 75, 76], "decoderonlyembeddericldataargu": [25, 26, 27, 33, 34, 35, 37], "decoderonlyembeddericlmodelargu": [25, 26, 27, 33, 34, 37], "decoderonlyembeddericlrunn": [25, 26, 27, 33, 37], "decoderonlyembeddericlsamedatasettraindataset": [25, 26, 27, 33, 37], "decoderonlyembeddericltrain": [25, 26, 27, 33, 37, 38], "decoderonlyembeddermodelargu": [25, 26, 27, 28, 29, 54], "decoderonlyembedderrunn": [25, 49, 50, 51, 54], "decoderonlyembeddertrain": [25, 49, 50, 51, 54, 55], "decoderonlyrerankerrunn": [25, 26, 27, 28, 31, 49, 50, 56, 59], "decoderonlyrerankertrain": [25, 26, 27, 28, 31, 32, 49, 50, 56, 59, 60], "decor": 110, "decreas": 91, "deep": [81, 97], "deepspe": 45, "def": [81, 91, 94, 95, 101, 103, 106, 108], "default": [4, 5, 7, 11, 13, 15, 16, 30, 35, 36, 41, 46, 47, 53, 58, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 98, 104, 112], "default_batch_s": [4, 35], "default_pooling_method": [66, 69, 70, 71, 72, 73], "defaultdict": 90, "defin": [90, 92, 94, 99], "definit": [94, 111], "degrad": [15, 16, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 108], "delici": 110, "demand": 89, "demonstr": [89, 92, 101, 104], "denomin": [94, 95], "denot": 94, "dens": [46, 73, 89, 90, 91, 111], "dense_scor": 46, "dense_vec": [73, 90, 92], "dense_weight": 46, "depend": [80, 92, 97, 103, 106, 108], "deploi": [98, 108], "deprec": 76, "desc": [103, 108], "descend": 81, "descript": [85, 90, 108, 112], "design": [104, 110], "destin": 101, "detach": 91, "detail": [10, 16, 89, 90, 91, 106, 108, 111], "determin": [105, 106], "dev": [18, 103, 105, 108], "develop": [80, 87, 89, 90], "devic": [5, 15, 16, 18, 21, 36, 41, 46, 53, 67, 69, 70, 72, 73, 74, 75, 76, 77, 98], "diagram": 99, "dict": [5, 7, 10, 11, 13, 15, 16, 30, 32, 36, 38, 41, 43, 45, 46, 47, 48, 53, 55, 58, 60, 63, 65, 70, 73], "dictionari": [7, 10, 13, 15, 16, 30, 46, 47, 63, 73, 90, 99], "differ": [18, 73, 89, 90, 91, 94, 95, 99, 101, 103, 104, 105, 106, 108, 110, 111], "digit": 89, "dim": [47, 91, 94, 97, 98, 103, 108, 112], "dimens": [73, 91, 99, 100, 101, 103, 112], "dimension": [89, 99, 100, 112], "dine": 110, "dinner": 110, "dir": 47, "dir_to_fil": 112, "direct": 100, "directli": [90, 94, 98, 99, 104, 105, 106, 108], "directori": [5, 11, 18, 21, 36, 41, 46, 53, 69, 70, 72, 73, 74, 75, 76, 77, 97, 103, 111, 112], "disable_tqdm": 45, "discount": [95, 103], "discrib": 99, "discript": [81, 97], "dish": 110, "disign": 108, "dispatch_batch": 45, "displai": 112, "dissimilar": 94, "dist": [94, 97], "distanc": [92, 98, 99, 100, 103, 105], "distil": [4, 5, 11, 35, 36, 41, 46, 53, 58], "distill_loss": [0, 1, 2, 5], "distinct": [81, 97, 110], "distinguish": [90, 111], "distribut": [5, 85, 90, 100, 101], "distroi": 99, "divers": [21, 81, 90, 97, 111], "divic": 98, "divid": [94, 100], "do": [46, 80, 89, 97, 98, 99, 103, 104, 105, 108], "do_ev": 45, "do_predict": 45, "do_train": 45, "doc": [95, 97, 110, 111], "doc_chain": 111, "doc_encod": 10, "document": [4, 10, 11, 18, 35, 58, 87, 89, 90, 92, 95, 103, 105, 106, 110, 112], "document_load": 111, "doe": [10, 81, 94, 98, 99, 101, 111, 112], "dog": 89, "domain": [21, 81, 97], "don": [90, 92, 105], "done": [100, 105, 106], "dot": 81, "dot_prod": 94, "downei": [81, 97], "download": [4, 15, 16, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 101, 103, 108, 111, 112], "downstream": 92, "downtown": 110, "driven": [81, 97], "drop_threshold": [9, 34], "dropout": [91, 92], "dtype": [90, 94, 97, 101, 103, 108, 110], "due": [92, 99], "dure": [5, 36, 41, 46, 53, 94, 101, 103, 108], "duretriev": 106, "e": [80, 98], "e_p": 92, "e_q": 92, "each": [15, 16, 18, 21, 69, 70, 72, 73, 74, 75, 76, 77, 81, 90, 91, 92, 95, 97, 98, 99, 100, 101, 103, 105, 106, 108, 110], "earli": 89, "earthi": 110, "easi": [104, 108], "easili": 104, "ecomretriev": 106, "edg": 99, "edit": 80, "edmund": 21, "ef_construct": [99, 101], "ef_search": [99, 101], "efconstruct": [99, 101], "effect": [81, 95, 100, 103], "effici": [89, 99, 106, 108], "efsearch": [99, 101], "eight": 104, "either": [92, 94], "element": [7, 13, 81, 99, 100, 101], "elementwise_affin": [91, 92], "elif": 91, "els": [91, 95, 105], "emb": [89, 97, 110, 111, 112], "embed": [5, 6, 11, 15, 36, 41, 42, 46, 53, 54, 67, 69, 70, 72, 73, 85, 86, 91, 92, 94, 95, 98, 99, 104, 105, 106, 110, 111, 112], "embed_model": 112, "embedcol": [4, 35], "embedd": [0, 1, 4, 5, 6, 7, 9, 15, 18, 21, 25, 29, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 53, 54, 55, 66, 67, 69, 70, 72, 73, 87], "embedder_name_or_path": [18, 21], "embeddermodelclass": 67, "embedderoutput": [0, 1, 2, 7, 46], "embeddertrainercallbackfordatarefresh": [0, 1, 2], "embedding_1": 94, "embedding_2": 94, "embedding_3": 94, "embedding_model": 111, "embeddings_1": 92, "embeddings_2": 92, "embeed": 100, "eminem": [81, 97], "emotionclassif": 105, "en": [21, 70, 81, 85, 89, 90, 91, 94, 97, 103, 104, 105, 108, 110, 111, 112], "enabl": [11, 36, 41, 46, 53, 89, 100], "enable_input_require_grad": [0, 1, 8, 11, 25, 26, 27, 33, 36, 39, 40, 41, 44, 46, 49, 50, 51, 53], "encod": [0, 1, 2, 3, 5, 8, 10, 11, 14, 15, 16, 25, 26, 27, 28, 30, 32, 33, 36, 38, 40, 41, 43, 44, 46, 49, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 77, 81, 89, 90, 92, 94, 95, 97, 103, 106, 108, 110], "encode_corpu": [0, 14, 15, 66, 69, 70, 71, 72, 73], "encode_kei": 90, "encode_kwarg": 111, "encode_multi_process": [0, 14, 15, 16], "encode_psg": 10, "encode_qri": 10, "encode_queri": [0, 14, 15, 66, 69, 70, 71, 72, 73, 90, 97, 103, 108, 110], "encode_queries_single_devic": [66, 70, 71], "encode_single_devic": [0, 14, 15, 66, 69, 70, 71, 72, 73], "encoder_onli": [41, 42, 43, 45, 46, 47, 48, 63, 64, 65, 72, 73, 77], "encoderonlyembedderm3model": [25, 26, 39, 44], "encoderonlyembedderm3modelargu": [25, 26, 39, 44, 45, 47], "encoderonlyembedderm3modelforinfer": [25, 26, 39, 44], "encoderonlyembedderm3runn": [25, 26, 39, 44, 47], "encoderonlyembedderm3train": [25, 26, 39, 44, 47, 48], "encoderonlyembedderm3trainingargu": [25, 26, 39, 44, 45, 47], "encoderonlyembedderrunn": [25, 26, 39, 40, 42], "encoderonlyembeddertrain": [25, 26, 39, 40, 42, 43], "encoderonlyrerankerrunn": [25, 49, 61, 62, 64], "encoderonlyrerankertrain": [25, 49, 61, 62, 64, 65], "encourag": 105, "end": [4, 91], "endem": 108, "eng": [104, 105], "engin": [105, 112], "england": 110, "english": [85, 90, 104, 105, 106, 108], "enhanc": [70, 85, 90], "enjoi": 94, "enough": [81, 89, 99, 105, 110], "ensembl": 46, "ensemble_scor": [25, 26, 39, 44, 46], "entir": [89, 92], "entiti": 21, "entri": 99, "entropi": [36, 41, 46, 53], "enumer": [81, 95, 97, 103, 108], "env": [97, 98], "environ": [81, 89, 90, 91, 92, 97, 98, 103, 104, 105, 108, 110, 111, 112], "ep": [91, 92], "epoch": 4, "equal": [105, 106], "etc": [95, 110], "euc_dist1_2": 94, "euc_dist1_3": 94, "euclidean": [99, 101], "eval": [91, 92, 95], "eval_accumulation_step": 45, "eval_dataset": [7, 13, 32, 38, 43, 48, 55, 60, 65], "eval_delai": 45, "eval_do_concat_batch": 45, "eval_metr": [18, 21], "eval_miracl": 18, "eval_mkqa": 21, "eval_nam": [18, 21], "eval_on_start": 45, "eval_output_method": [18, 21], "eval_output_path": [18, 21], "eval_split": 105, "eval_step": 45, "eval_strategi": 45, "eval_use_gather_object": 45, "evalpredict": [7, 13, 32, 38, 43, 48, 55, 60, 65], "evalu": [18, 21, 87, 101, 104], "evaluation_strategi": 45, "evaluation_tim": 104, "even": [94, 99, 101, 103, 105], "event": 4, "everi": [5, 11, 46, 58], "every_sav": 45, "everyth": 111, "everywher": 110, "exactli": 91, "exampl": [10, 18, 21, 70, 87, 89, 91, 95, 100, 105, 108, 112], "example_id": 21, "example_passage_max_len": 34, "example_query_max_len": 34, "examples_for_task": 70, "examples_instruction_format": 70, "excel": 89, "except": 110, "excit": [87, 110], "execut": [6, 12], "exhaust": 103, "exist": [92, 105], "expand": [87, 94], "expect": [91, 110], "experi": [101, 103, 105, 110], "expert": [81, 97], "explan": 111, "explor": [87, 99], "express": 94, "exquisit": 110, "extend": [15, 16], "extens": 99, "extra": [89, 110], "extrem": [89, 98, 101], "f": [81, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 103, 106, 108], "f1": [105, 106], "f_": 92, "facilit": 108, "factor": [99, 100], "factori": [3, 9, 29, 34, 45, 52, 57], "fail": 89, "fair": 110, "fairli": 105, "faiss": [101, 103, 108, 110, 111, 112], "faiss_index": 112, "faissvectorstor": 112, "fake": 98, "fall": [94, 99], "fals": [3, 5, 7, 9, 13, 16, 18, 21, 29, 34, 36, 41, 45, 46, 47, 52, 53, 57, 68, 69, 70, 72, 73, 74, 75, 76, 77, 90, 91, 92, 95, 103], "famili": 99, "familiar": [87, 108], "famou": [81, 97, 110], "fast": [89, 97, 108, 110], "faster": 105, "favor": 110, "favorit": 94, "featur": [4, 5, 10, 11, 30, 36, 41, 46, 53, 58, 63, 89, 110], "feed": [5, 36, 41, 46, 53], "feel": [90, 91, 103, 108], "fei": [81, 97], "femal": [81, 97], "fetch": [90, 92], "fever": [104, 105], "few": [70, 94, 97, 99], "fidel": 99, "field": 89, "fight": [81, 97], "figur": [81, 97, 110], "fil": 110, "file": [89, 90, 92, 99, 100, 101, 104, 111, 112], "file_path": [4, 10], "fill": [89, 110, 111, 112], "film": [81, 97], "fin": 92, "final": [4, 81, 92, 110, 112], "find": [89, 103, 105, 106], "fine": [6, 12, 90, 92, 105], "finest": 110, "finetun": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 67, 68, 80, 87], "finish": 105, "fiqa2018": [104, 105], "fire": 110, "first": [7, 13, 73, 81, 85, 89, 90, 91, 94, 95, 97, 98, 99, 100, 103, 104, 106, 108, 110, 111, 112], "firstli": 92, "fit": [99, 101], "fix": 100, "fix_encod": 45, "fix_position_embed": 45, "flag_dres_model": 106, "flagautomodel": 66, "flagautorerank": 66, "flagdresmodel": 106, "flagembed": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 18, 21, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 89, 90, 91, 92, 94, 97, 103, 106, 108, 110], "flagmodel": [81, 89, 90, 91, 94, 97, 103, 108, 110], "flagopen": 80, "flagrerank": 108, "flat": [97, 98, 99, 100, 103, 108], "flavor": 110, "float": [3, 4, 5, 9, 15, 16, 29, 34, 35, 36, 41, 45, 46, 52, 53, 57, 67, 68, 69, 72, 73, 74, 75, 76, 77, 91, 100], "float32": [90, 94, 97, 98, 101, 103, 108], "focu": 110, "focus": 18, "folder": 87, "follow": [21, 70, 81, 89, 90, 91, 92, 94, 95, 97, 101, 103, 105, 106, 108, 111, 112], "food": 110, "footprint": 101, "forc": 101, "form": [95, 99, 103], "format": [4, 15, 16, 35, 70, 110], "forward": [0, 1, 2, 5, 8, 11, 25, 26, 39, 44, 46, 49, 50, 56, 58], "found": [4, 10, 18, 90, 110], "foundat": [81, 97], "fp16": 45, "fp16_backend": 45, "fp16_full_ev": 45, "fp16_opt_level": 45, "frac": [92, 94, 95, 103], "framework": [104, 111, 112], "free": [89, 90, 91, 103, 108], "freedom": 108, "freeli": 89, "freeman": [81, 97], "french": 110, "frequenc": [89, 98], "freshest": 110, "fri": 110, "from": [4, 5, 10, 15, 16, 30, 46, 47, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111, 112], "from_default": 112, "from_docu": [111, 112], "from_exist": 105, "from_finetun": [66, 67, 68], "from_numpi": 94, "from_peft": [29, 34, 52, 57], "from_pretrain": [91, 92], "from_raw_model": 57, "from_templ": 111, "front": [89, 90], "fsdp": 45, "fsdp_config": 45, "fsdp_min_num_param": 45, "fsdp_transformer_layer_cls_to_wrap": 45, "fsdpoption": 45, "full": [90, 91, 100, 103, 104, 105], "full_determin": 45, "function": [5, 46, 72, 90, 91, 98, 99, 103, 108, 111, 112], "fundament": 99, "futur": 97, "g": 98, "gain": [95, 103], "gather": 5, "gb": [85, 90], "ge": 92, "geluactiv": [91, 92], "gemma": 108, "gemma2": 108, "gener": [18, 81, 86, 89, 91, 92, 99, 101, 104, 105], "genu": 108, "geoffrei": [81, 97], "geometr": 94, "get": [4, 5, 16, 36, 41, 46, 47, 53, 67, 72, 73, 81, 87, 91, 92, 94, 95, 97, 99, 103, 105, 108], "get_detailed_exampl": [66, 70, 71], "get_detailed_input": [0, 14, 16], "get_detailed_instruct": [0, 14, 15, 16], "get_local_scor": [0, 1, 2, 5], "get_model": [25, 26, 39, 44, 47, 105], "get_prompt": 112, "get_target_devic": [0, 14, 15, 16], "get_task": [104, 106], "get_templ": 112, "get_text_embed": 112, "giant": 108, "git": 80, "github": [80, 87, 90, 105, 111, 112], "give": [92, 101, 110, 111, 112], "given": [4, 18, 70, 73, 90, 95, 99, 103, 106, 111, 112], "global": [81, 97, 99, 112], "go": [91, 94, 99, 105, 106, 108, 110, 112], "goal": [105, 106], "good": [101, 103, 110], "got": 81, "goto": 106, "gpt": [81, 89, 97, 110, 111, 112], "gpu": [15, 16, 74, 75, 76, 89, 91, 99, 100, 101, 103, 105, 106], "gpucloneropt": 98, "gpumultiplecloneropt": [97, 98], "gpuresourc": 98, "gpuresourcesvector": 98, "grade": [95, 103], "gradient": [11, 36, 41, 46, 53], "gradient_accumulation_step": 45, "gradient_checkpoint": 45, "gradient_checkpointing_en": [0, 1, 8, 11, 25, 26, 27, 33, 36, 39, 40, 41, 44, 46, 49, 50, 51, 53], "gradient_checkpointing_kwarg": 45, "grain": 92, "gram": 89, "grammi": [81, 97], "granular": [90, 111, 112], "granularityi": 90, "graph": 99, "great": [98, 99, 101, 110, 112], "greater": 99, "greater_is_bett": 45, "ground": [81, 101, 103], "ground_truth": [81, 95, 103, 108], "group": [4, 5, 85, 89, 99], "group_by_length": 45, "group_siz": 5, "guarante": [99, 101], "h5py": 101, "h_p": 92, "h_q": 92, "ha": [21, 89, 90, 91, 92, 94, 99, 101], "had": 81, "half": [15, 16, 67, 68, 69, 72, 73, 74, 75, 76, 77], "half_precision_backend": 45, "hallucin": 112, "ham": 99, "hand": 87, "handl": 91, "happen": 111, "happi": 89, "hard": 111, "hardwar": [74, 75, 76], "hash": 99, "hashtabel": 99, "have": [81, 89, 91, 94, 95, 97, 99, 103, 104, 105, 108, 111, 112], "hawaii": 94, "hdf5": 101, "he": 81, "head_multi": 57, "head_typ": 57, "hear": 21, "heavi": 92, "hello": 112, "help": [110, 112], "helper": 46, "her": [81, 94, 97], "here": [81, 87, 91, 92, 97, 100, 101, 106, 111, 112], "hf": [4, 10, 47, 67, 68, 69, 70, 72, 73, 91, 105, 106], "hf_subset": 104, "hi": [18, 81, 94, 97], "hidden": [36, 41, 46, 53, 67, 72, 73, 91, 92], "hidden_s": 73, "hidden_st": 46, "hierarch": 99, "high": [98, 103, 112], "higher": [81, 89, 99], "highli": 106, "hinton": [81, 97], "hit": 95, "hnsw": 99, "holidai": 94, "hollywood": [81, 97], "hopefulli": 108, "hot": 89, "hotpot": 110, "hotpotqa": [104, 105], "hous": 110, "how": [7, 13, 81, 89, 90, 91, 94, 95, 97, 98, 99, 100, 101, 104, 105, 106, 108, 110, 111, 112], "howev": 89, "http": [80, 101, 111], "hub": [4, 15, 16, 18, 21, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 105, 106], "hub_always_push": 45, "hub_model_id": 45, "hub_private_repo": 45, "hub_strategi": 45, "hub_token": 45, "hubstrategi": 45, "huge": [89, 111], "huggingfac": [15, 16, 18, 21, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 90, 103, 111, 112], "huggingfaceembed": [111, 112], "human": [89, 105], "i": [5, 7, 13, 15, 16, 18, 21, 67, 68, 81, 86, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "i_truth": 101, "ic": 110, "icl": [25, 26, 27, 34, 35, 36, 37, 38, 70, 90], "icl_suffix_str": 34, "iclllmembedd": [66, 71], "icon": [81, 97], "id": [46, 73, 90, 95, 97, 108], "idcg": [95, 103], "idcg_p": [95, 103], "idea": [81, 105], "ideal": [95, 103], "ident": [98, 108], "idf": 89, "idx": [103, 108], "iflytek": 106, "ignore_data_skip": 45, "imag": 89, "imagenet": [81, 97], "imdbclassif": 105, "implement": [15, 16, 36, 41, 46, 53, 72, 91, 106], "import": [81, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "improv": [89, 92, 104], "in_featur": [91, 92], "includ": [87, 89, 110], "include_inputs_for_metr": 45, "include_num_input_tokens_seen": 45, "include_tokens_per_second": 45, "incom": 99, "increas": 99, "indeci": 81, "independ": [15, 16], "index": [4, 35, 81, 94], "index_cpu_to_all_gpu": [97, 98], "index_cpu_to_gpu": 98, "index_cpu_to_gpu_multipl": 98, "index_factori": [97, 98, 103, 108], "index_gpu": 98, "indexflat": 100, "indexflatip": [98, 99, 110], "indexflatl2": [99, 101, 112], "indexhnswflat": [99, 101], "indexivfflat": [99, 101], "indexivfpq": 100, "indexivfscalarquant": 100, "indexlsh": 101, "indexpq": [100, 101], "indexscalarquant": [100, 101], "indic": [81, 94, 95, 97, 100, 111], "industri": 98, "ineffici": 89, "infer": [0, 15, 16, 46, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 87, 89, 90, 103, 108], "inform": [5, 18, 81, 89, 95, 101, 103, 110, 111, 112], "infti": 94, "ingredi": 110, "init": 112, "initi": [90, 98, 104, 106, 111, 112], "inner": [36, 41, 46, 53, 81, 92, 99, 103], "innov": [81, 97, 110], "inplac": [91, 92], "input": [4, 5, 7, 10, 11, 13, 15, 16, 30, 36, 41, 46, 53, 58, 63, 69, 70, 72, 73, 74, 75, 76, 77, 89, 90, 91, 92, 97, 105, 106, 108, 111], "input_id": [46, 91], "input_queu": [15, 16], "input_was_str": 91, "inspect": 4, "instal": [81, 89, 90, 95, 97, 99, 100, 101, 103, 108, 110, 111, 112], "instanc": [6, 12, 31, 37, 42, 47, 54, 59, 64, 95, 103, 104], "instead": [76, 91, 100, 111], "instruct": [4, 15, 16, 35, 67, 69, 70, 72, 73, 74, 75, 76, 77, 85, 89, 90, 106], "instruction_format": [15, 16, 70], "int": [3, 4, 5, 9, 10, 11, 15, 16, 29, 30, 34, 35, 36, 41, 45, 46, 47, 52, 53, 57, 58, 63, 69, 70, 72, 73, 74, 75, 76, 77, 90, 95, 103, 106, 108], "int32vector": 98, "integ": [15, 16, 101], "integr": [92, 112], "intellig": [87, 90], "interact": 92, "interest": [87, 94, 95], "interg": 100, "intermedi": [91, 92], "intermediate_act_fn": [91, 92], "intern": [15, 16], "intersect": [94, 101], "intersect1d": [95, 101, 103, 108], "intervalstrategi": 45, "introduc": [90, 94, 97, 100, 104], "intuit": 89, "invalid": 5, "inventor": 81, "invert": [99, 100], "invok": 111, "involv": [95, 103], "ip": 100, "iron": [81, 97], "irrelev": [105, 106], "is_train": 97, "isin": [95, 103, 108], "isinst": 91, "issu": [85, 90, 94], "italian": 110, "item": [92, 94, 95], "iter": [15, 69, 70, 72, 73, 74, 75, 76, 77, 81], "iterabledataset": [7, 13, 32, 38, 43, 48, 55, 60, 65], "its": [81, 85, 90, 92, 97, 98, 100, 103, 104, 105, 106, 110, 111], "itself": 98, "ivf": 99, "ivfflatl2": 101, "j": [81, 92, 94, 95, 103, 108], "ja": 21, "jaccard_similar": 94, "jackson": [81, 97], "japanes": 110, "japenes": 110, "jdreview": 106, "jit_mode_ev": 45, "jjiga": 110, "joe": 110, "joint": 92, "jr": [81, 97], "json": 104, "just": [46, 92, 94, 97, 98, 99, 104, 105], "k": [81, 95, 97, 99, 100, 101, 103, 105, 106, 108], "k_valu": [18, 21], "kd_loss_typ": [5, 36, 41, 45, 46, 53], "keepdim": 91, "kei": [81, 89, 90, 91, 92, 110, 111, 112], "kernal": 98, "kernel": [97, 98], "key_embed": 90, "keyword": 87, "kg_co2_emiss": 104, "kind": [89, 110], "kitti": 89, "kl_div": [5, 36, 41, 45, 53], "knn": 97, "knock": 21, "know": [81, 91, 110, 111, 112], "knowledg": [5, 11, 36, 41, 46, 53, 58, 81, 87, 97, 112], "knowledge_distil": [3, 9, 34], "known": [18, 81, 97, 99, 104], "korean": 110, "kwarg": [4, 5, 7, 11, 13, 15, 16, 36, 41, 46, 53, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 106], "l2": [92, 94, 100], "l6": 89, "label": [18, 81, 95, 103, 105, 106, 108], "label_nam": 45, "label_pad_token_id": 10, "label_smoothing_factor": 45, "lambda": 81, "lambdalr": [7, 13, 32, 38, 43, 48, 55, 60, 65], "land": 99, "langchain_commun": 111, "langchain_cor": 111, "langchain_huggingfac": 111, "langchain_openai": 111, "languag": [18, 21, 85, 89, 90, 94, 104, 105, 108, 111], "larg": [81, 85, 89, 90, 91, 92, 94, 98, 99, 101, 104, 108, 112], "larger": [89, 94, 99], "largest": [106, 108], "last": [36, 41, 45, 46, 53, 67, 72, 73, 91, 98, 101, 105], "last_hidden_st": [36, 41, 46, 53, 72, 91], "last_token": [36, 53], "late": 92, "later": 111, "latest": [97, 98, 104], "latn": 104, "laxic": 73, "layer": [58, 75, 76, 91, 92, 99, 108], "layernorm": [91, 92], "layerwis": [25, 49, 50, 57, 58, 59, 60, 75, 108], "layerwisellmrerank": [66, 78], "lcqmc": 106, "lead": [81, 94, 97, 98, 108], "leaderboard": 104, "learn": [81, 90, 91, 94, 95, 97, 103, 111, 112], "learnabl": 92, "learning_r": 45, "legendari": [81, 97], "len": [81, 89, 92, 94, 95, 101, 103, 108, 112], "length": [15, 16, 45, 69, 70, 72, 73, 74, 75, 76, 77, 81, 89, 90, 92, 97, 103, 108], "length_column_nam": 45, "less": [101, 108], "let": [81, 89, 91, 94, 97, 98, 104, 105, 108, 110, 111, 112], "lex": 92, "lexic": [73, 92], "lexical_weight": [73, 90, 92], "lexical_weights_1": 73, "lexical_weights_2": 73, "li": [81, 97], "librari": 89, "licens": 89, "light": 76, "lightweight": [76, 108], "lightweightllmrerank": [66, 78], "like": [69, 74, 75, 76, 81, 89, 90, 97, 103, 104, 111, 112], "limit": [89, 99], "line": [81, 97, 103], "linear": [45, 47, 73, 91, 92, 99], "lingual": [90, 111, 112], "link": [105, 106], "linux": [98, 99, 100, 101], "list": [4, 5, 7, 10, 11, 13, 15, 16, 18, 29, 32, 34, 35, 36, 38, 41, 43, 45, 46, 48, 52, 53, 55, 57, 58, 60, 65, 67, 69, 70, 72, 73, 74, 75, 76, 77, 81, 91, 95, 99, 103, 104, 105, 106, 108, 110], "liter": [15, 16, 73], "littl": 81, "live": [108, 110], "ll": [89, 95, 97, 98, 101, 104], "llama": 112, "llama_index": 112, "llm": [10, 69, 74, 75, 76, 111, 112], "llmembedd": 90, "load": [4, 6, 10, 12, 15, 16, 31, 37, 42, 47, 54, 59, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 89, 90, 91, 97, 101, 104, 105, 106, 111, 112], "load_best_model_at_end": 45, "load_data": 112, "load_data_col": [0, 1, 2, 6, 8, 12], "load_dataset": [103, 108], "load_tokenizer_and_model": [0, 1, 2, 6, 8, 12, 25, 26, 27, 28, 31, 33, 37, 39, 40, 42, 44, 47, 49, 50, 51, 54, 56, 59, 61, 62, 64], "load_train": [0, 1, 2, 6, 8, 12, 25, 26, 27, 28, 31, 33, 37, 39, 40, 42, 44, 47, 49, 50, 51, 54, 56, 59, 61, 62, 64], "load_train_dataset": [0, 1, 2, 6, 8, 12, 25, 26, 27, 33, 37], "loader": 111, "lobster": 110, "local": [5, 15, 16, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 97, 99, 103, 111], "local_rank": 45, "locat": 110, "log_2": [95, 103], "log_level": 45, "log_level_replica": 45, "log_on_each_nod": 45, "logging_dir": 45, "logging_first_step": 45, "logging_nan_inf_filt": 45, "logging_step": 45, "logging_strategi": 45, "logist": [105, 106], "logit": [30, 63], "long": [90, 92, 101, 110], "longer": [99, 101], "look": [81, 89, 94, 101, 104, 105], "loop": [4, 97], "lora_alpha": [29, 34, 52, 57], "lora_dropout": [29, 34, 52, 57], "lora_rank": [29, 34, 52, 57], "lose": [94, 101], "loss": [5, 7, 11, 13, 36, 41, 46, 53, 101], "lot": [89, 112], "love": [89, 91], "low": [89, 100], "lower": 112, "lr_scheduler_kwarg": 45, "lr_scheduler_typ": 45, "lrlm": 90, "lsh": 99, "lstm": 89, "luxuri": 110, "m": [18, 21, 92, 94, 95, 98, 99, 100, 101, 103, 108, 110], "m3": [18, 21, 25, 26, 39, 45, 46, 47, 48, 73, 108, 111, 112], "m3_kd_loss": [5, 46], "m3embedd": [66, 71], "machin": [91, 103, 105, 111, 112], "made": 94, "magic": 111, "magnitud": 94, "mai": [94, 99, 111], "main": [95, 103, 104, 105, 106], "main_scor": 104, "mainli": 99, "maintain": [90, 97, 98, 99], "make": [89, 91, 92, 95, 97, 98, 99, 103, 105, 110, 111], "man": [81, 97], "manhattan": 110, "mani": 87, "manual": 101, "map": [85, 89, 90, 100, 105, 106], "map_at_1": 104, "map_at_10": 104, "map_at_100": 104, "map_at_1000": 104, "map_at_20": 104, "map_at_3": 104, "map_at_5": 104, "marco": [103, 108], "markdown": [18, 21], "marvel": [81, 97], "masa": 110, "masayoshi": 110, "mask": [36, 41, 46, 53, 72], "massiv": 104, "massiveintentclassif": 105, "massivescenarioclassif": 105, "match": [73, 89, 92, 111, 112], "mathc": 92, "matrix": [36, 41, 46, 53, 92], "max": [92, 95, 100, 103, 108], "max_": 92, "max_example_num_per_dataset": [3, 9, 34], "max_grad_norm": 45, "max_len": 3, "max_length": [4, 10, 15, 16, 35, 69, 70, 72, 73, 74, 75, 76, 77, 90, 91, 92], "max_passage_length": 73, "max_query_length": 73, "max_step": 45, "maxim": 99, "maximum": [15, 16, 69, 70, 72, 73, 74, 75, 76, 77, 92, 95, 103, 108, 111, 112], "mb": [85, 90], "md": [18, 21, 105, 106], "mean": [81, 91, 94, 95, 99, 103, 105, 106], "measur": [94, 95, 103, 105, 106], "meat": 110, "mechan": 94, "medicalretriev": 106, "medrxivclusteringp2p": 105, "medrxivclusterings2": 105, "melanoleuca": 108, "member": 108, "memori": [89, 99, 100, 101], "menu": 110, "messag": 110, "metadata": 111, "method": [0, 1, 2, 8, 14, 25, 26, 27, 28, 33, 39, 40, 44, 49, 50, 51, 56, 61, 62, 66, 71, 78, 89, 91, 92, 94, 99, 110, 111], "metric": [81, 94, 97, 99, 100, 101, 103, 104, 105, 106, 108], "metric_for_best_model": 45, "metric_inner_product": [97, 103, 108], "metric_l2": [98, 100, 101], "michael": [81, 97], "midtown": 110, "might": [81, 89, 97, 98], "million": 97, "min": [95, 103, 108], "mind": 111, "mindsmallrerank": 105, "mini": [105, 106, 110, 111, 112], "minicpm": 108, "minilm": 89, "minimum": 95, "minut": 81, "miracl": 17, "miracl_eval_result": 18, "mitr": 110, "mkqa": 17, "mkqa_eval_result": 21, "mm": 94, "mmarcorerank": 106, "mmarcoretriev": 106, "modal": 112, "mode": 80, "model": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 18, 21, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 85, 86, 91, 92, 94, 95, 97, 99, 103, 104, 105, 108, 110, 111, 112], "model_arg": [6, 12, 31, 37, 42, 47, 54, 59, 64], "model_card": [105, 106], "model_class": [67, 68], "model_init": [7, 13, 32, 38, 43, 48, 55, 60, 65], "model_nam": [104, 105, 106, 111, 112], "model_name_or_path": [3, 9, 15, 16, 29, 34, 45, 47, 52, 57, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 106], "model_output": 91, "model_revis": [104, 105], "model_typ": [3, 52, 57], "modern": 89, "modifi": [111, 112], "modul": [7, 13, 32, 38, 43, 48, 55, 60, 65], "modulelist": [91, 92], "modules_to_sav": [29, 34, 52, 57], "more": [81, 85, 87, 89, 90, 91, 94, 99, 101, 108, 110, 111, 112], "morgan": [81, 97], "most": [81, 85, 89, 94, 104, 110, 111, 112], "mp_paramet": 45, "mrr": [81, 105, 106], "mrr_at_1": 104, "mrr_at_10": 104, "mrr_at_100": 104, "mrr_at_1000": 104, "mrr_at_20": 104, "mrr_at_3": 104, "mrr_at_5": 104, "mrr_init": 108, "mrr_rerank": 108, "msmarco": [103, 104, 105, 108], "mteb": 85, "mteb_main_en": 105, "mteb_vers": 104, "mtopdomainclassif": 105, "mtopintentclassif": 105, "much": 101, "mul": 92, "multi": [4, 15, 16, 35, 73, 90, 99, 111, 112], "multilingu": [18, 90, 92, 108], "multilingualsenti": 106, "multimod": 112, "multipl": [15, 16, 92, 95, 112], "multiscal": 112, "music": [81, 97], "must": 46, "my": 94, "mymodel": 106, "n": [3, 70, 89, 90, 91, 92, 94, 95, 97], "name": [15, 16, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 100], "namespac": [103, 108], "nanswer": 97, "narr": [81, 97], "narrow": 110, "nativ": [18, 108], "natur": [89, 94, 104, 111], "nauc_map_at_1000_diff1": 104, "nauc_map_at_1000_max": 104, "nauc_map_at_1000_std": 104, "nauc_map_at_100_diff1": 104, "nauc_map_at_100_max": 104, "nauc_map_at_100_std": 104, "nauc_map_at_10_diff1": 104, "nauc_map_at_10_max": 104, "nauc_map_at_10_std": 104, "nauc_map_at_1_diff1": 104, "nauc_map_at_1_max": 104, "nauc_map_at_1_std": 104, "nauc_map_at_20_diff1": 104, "nauc_map_at_20_max": 104, "nauc_map_at_20_std": 104, "nauc_map_at_3_diff1": 104, "nauc_map_at_3_max": 104, "nauc_map_at_3_std": 104, "nauc_map_at_5_diff1": 104, "nauc_map_at_5_max": 104, "nauc_map_at_5_std": 104, "nauc_mrr_at_1000_diff1": 104, "nauc_mrr_at_1000_max": 104, "nauc_mrr_at_1000_std": 104, "nauc_mrr_at_100_diff1": 104, "nauc_mrr_at_100_max": 104, "nauc_mrr_at_100_std": 104, "nauc_mrr_at_10_diff1": 104, "nauc_mrr_at_10_max": 104, "nauc_mrr_at_10_std": 104, "nauc_mrr_at_1_diff1": 104, "nauc_mrr_at_1_max": 104, "nauc_mrr_at_1_std": 104, "nauc_mrr_at_20_diff1": 104, "nauc_mrr_at_20_max": 104, "nauc_mrr_at_20_std": 104, "nauc_mrr_at_3_diff1": 104, "nauc_mrr_at_3_max": 104, "nauc_mrr_at_3_std": 104, "nauc_mrr_at_5_diff1": 104, "nauc_mrr_at_5_max": 104, "nauc_mrr_at_5_std": 104, "nauc_ndcg_at_1000_diff1": 104, "nauc_ndcg_at_1000_max": 104, "nauc_ndcg_at_1000_std": 104, "nauc_ndcg_at_100_diff1": 104, "nauc_ndcg_at_100_max": 104, "nauc_ndcg_at_100_std": 104, "nauc_ndcg_at_10_diff1": 104, "nauc_ndcg_at_10_max": 104, "nauc_ndcg_at_10_std": 104, "nauc_ndcg_at_1_diff1": 104, "nauc_ndcg_at_1_max": 104, "nauc_ndcg_at_1_std": 104, "nauc_ndcg_at_20_diff1": 104, "nauc_ndcg_at_20_max": 104, "nauc_ndcg_at_20_std": 104, "nauc_ndcg_at_3_diff1": 104, "nauc_ndcg_at_3_max": 104, "nauc_ndcg_at_3_std": 104, "nauc_ndcg_at_5_diff1": 104, "nauc_ndcg_at_5_max": 104, "nauc_ndcg_at_5_std": 104, "nauc_precision_at_1000_diff1": 104, "nauc_precision_at_1000_max": 104, "nauc_precision_at_1000_std": 104, "nauc_precision_at_100_diff1": 104, "nauc_precision_at_100_max": 104, "nauc_precision_at_100_std": 104, "nauc_precision_at_10_diff1": 104, "nauc_precision_at_10_max": 104, "nauc_precision_at_10_std": 104, "nauc_precision_at_1_diff1": 104, "nauc_precision_at_1_max": 104, "nauc_precision_at_1_std": 104, "nauc_precision_at_20_diff1": 104, "nauc_precision_at_20_max": 104, "nauc_precision_at_20_std": 104, "nauc_precision_at_3_diff1": 104, "nauc_precision_at_3_max": 104, "nauc_precision_at_3_std": 104, "nauc_precision_at_5_diff1": 104, "nauc_precision_at_5_max": 104, "nauc_precision_at_5_std": 104, "nauc_recall_at_1000_diff1": 104, "nauc_recall_at_1000_max": 104, "nauc_recall_at_1000_std": 104, "nauc_recall_at_100_diff1": 104, "nauc_recall_at_100_max": 104, "nauc_recall_at_100_std": 104, "nauc_recall_at_10_diff1": 104, "nauc_recall_at_10_max": 104, "nauc_recall_at_10_std": 104, "nauc_recall_at_1_diff1": 104, "nauc_recall_at_1_max": 104, "nauc_recall_at_1_std": 104, "nauc_recall_at_20_diff1": 104, "nauc_recall_at_20_max": 104, "nauc_recall_at_20_std": 104, "nauc_recall_at_3_diff1": 104, "nauc_recall_at_3_max": 104, "nauc_recall_at_3_std": 104, "nauc_recall_at_5_diff1": 104, "nauc_recall_at_5_max": 104, "nauc_recall_at_5_std": 104, "navig": 99, "nbit": [99, 100, 101], "ndarrai": [15, 16, 69, 70, 72, 73, 106], "ndcg": [105, 106], "ndcg_at_1": 104, "ndcg_at_10": [18, 104], "ndcg_at_100": 104, "ndcg_at_1000": 104, "ndcg_at_20": 104, "ndcg_at_3": 104, "ndcg_at_5": 104, "ndcg_p": [95, 103], "ndcg_score": [95, 103, 108], "nearest": [98, 99, 100], "neat": 97, "need": [89, 90, 91, 92, 97, 98, 99, 101, 105, 106, 110, 112], "neftune_noise_alpha": 45, "neg": [5, 36, 41, 46, 53, 95, 103], "neg_scor": [4, 10], "negatives_cross_devic": [5, 36, 41, 45, 46, 53], "neighbor": [98, 99, 100, 101], "network": [81, 89, 97], "neural": [81, 89, 97], "new": [90, 105, 108, 110, 111], "new_data": 100, "new_id": 108, "new_scor": 108, "new_templ": 112, "new_text": 108, "next": [81, 100, 104], "nfcorpu": [104, 105], "ng": [81, 97], "ngpu": 98, "nine": 110, "nlist": [99, 100, 101], "nlp": [91, 104], "nn": [91, 94], "no_cuda": 45, "no_in_batch_neg_flag": [5, 46], "node": 99, "node_pars": 112, "non": 112, "none": [3, 4, 5, 7, 9, 10, 11, 13, 15, 16, 29, 30, 32, 34, 35, 36, 38, 41, 43, 45, 46, 47, 48, 52, 53, 55, 57, 58, 60, 63, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 90, 91], "norm": [92, 94], "normal": [15, 16, 36, 41, 46, 53, 69, 70, 72, 73, 74, 75, 76, 77, 91, 92, 94, 95, 100, 103], "normalize_embed": [15, 36, 41, 45, 46, 53, 67, 69, 70, 72, 73, 89, 111], "note": [4, 35, 81, 91, 99, 104, 105, 106, 108, 112], "notebook": [97, 98, 100, 101, 103, 105], "notimplementederror": [15, 36, 37, 41, 46, 53, 72], "noun": 94, "now": [81, 91, 94, 97, 98, 99, 100, 104, 105, 108, 110, 111, 112], "np": [15, 69, 70, 72, 73, 89, 95, 97, 98, 99, 100, 101, 103, 106, 108, 110], "nprob": [99, 101], "nprobe": [99, 101], "nq": [104, 105], "nqueri": 69, "nrespons": 34, "nsw": 99, "ntotal": [97, 103, 108, 110], "nuber": 99, "null": 104, "num": 46, "num_process": [4, 35], "num_train_epoch": 45, "num_work": [74, 75], "number": [4, 5, 15, 35, 69, 70, 72, 73, 74, 75, 76, 77, 95, 97, 99, 100, 103, 105, 106, 108, 111, 112], "numer": 94, "numpi": [15, 16, 67, 69, 70, 72, 89, 91, 95, 97, 98, 99, 100, 101, 103, 108, 110], "nvidia": [97, 98, 99, 100, 101], "o": [89, 92, 110, 111, 112], "o1": 45, "object": [4, 15, 16, 98, 100, 103, 112], "obtain": 91, "obviou": 101, "ocnli": 106, "offer": 110, "offici": 89, "omakas": 110, "on_epoch_end": [0, 1, 2, 4], "onc": [81, 97], "one": [15, 16, 81, 87, 89, 97, 100, 101, 104, 111, 112], "onli": [5, 7, 13, 15, 16, 18, 25, 26, 29, 30, 31, 32, 34, 36, 37, 41, 49, 52, 53, 54, 57, 58, 59, 60, 64, 65, 69, 72, 74, 75, 76, 77, 81, 89, 92, 94, 95, 97, 98, 99, 100, 105, 111, 112], "onlineshop": 106, "open": [21, 104, 111, 112], "openai": [81, 97, 110, 111, 112], "openai_api_kei": [89, 110, 111, 112], "opposit": 94, "optim": [7, 13, 32, 38, 43, 45, 48, 55, 60, 65, 101], "optim_arg": 45, "optim_target_modul": 45, "optimizernam": 45, "optimum": 99, "option": [4, 5, 7, 11, 13, 15, 16, 30, 35, 36, 41, 46, 47, 53, 58, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 111, 112], "order": [81, 89, 95, 99, 103, 105], "org": 111, "origin": 100, "ortomar": 110, "other": [81, 89, 97, 101, 103, 105], "otherwis": [5, 7, 13, 15, 16, 46, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 90, 97, 106], "our": [18, 21, 81, 87, 97, 101, 103, 104, 108, 110, 111, 112], "out": [10, 36, 41, 46, 53, 81, 90, 103, 105, 108, 110], "out_featur": [91, 92], "outdoor": 110, "output": [5, 7, 11, 13, 15, 16, 30, 36, 41, 46, 53, 58, 63, 67, 69, 70, 72, 73, 91, 92, 94, 108], "output_1": 92, "output_2": 92, "output_dir": [5, 11, 18, 21, 36, 41, 45, 46, 53], "output_fold": [104, 105, 106], "output_path": [105, 106], "over": 90, "overcom": 89, "overlap": [111, 112], "overrid": [7, 13], "overwrit": [18, 21], "overwrite_output_dir": 45, "own": [89, 97], "p": [91, 92, 94, 95, 103, 108], "p_embed": 90, "p_rep": [5, 36, 41, 46, 53, 73], "packag": [80, 89, 91, 92, 104, 105, 106, 110, 111, 112], "pad": [4, 10, 35, 36, 41, 46, 53, 91], "pad_to_multiple_of": [3, 4, 9, 10, 34, 35], "padding_idx": [91, 92], "paddingstrategi": [4, 10, 35], "page": [104, 105, 106, 111], "pair": [10, 11, 16, 21, 30, 58, 63, 73, 74, 75, 76, 77, 105, 106, 108], "panda": 108, "panthera": 108, "paper": [90, 111, 112], "parallel": [89, 91], "paramet": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 30, 31, 35, 36, 37, 41, 46, 47, 53, 54, 58, 59, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 85, 90, 99, 100, 101, 108, 112], "parser": 112, "part": [90, 101, 103, 104, 110, 111, 112], "particular": 111, "particularli": 112, "partit": [99, 100], "pass": [7, 10, 11, 13, 58, 98, 106], "passag": [5, 15, 16, 36, 41, 46, 53, 69, 70, 72, 73, 74, 75, 76, 77, 81, 90, 92, 94, 97, 103, 108, 110], "passage_instruction_for_rerank": [3, 16, 74, 75, 76, 77], "passage_instruction_for_retriev": [9, 34], "passage_instruction_format": [3, 9, 16, 34, 74, 75, 76, 77], "passage_max_len": [3, 4, 9, 10, 34, 35], "passage_max_length": [15, 69, 70, 72, 73], "passiv": 45, "past": [105, 106], "past_index": 45, "pasta": 110, "path": [4, 10, 15, 16, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 97, 103, 105, 106, 111], "path_to_model": 106, "pattern": 89, "pawsx": 106, "pdf": 111, "peft": [74, 75, 76], "peft_model_path": [29, 34], "peft_path": [74, 75, 76], "peopl": [81, 89, 97, 112], "pepperoni": 110, "per": [15, 16, 100, 110], "per_device_eval_batch_s": 45, "per_device_train_batch_s": [4, 35, 45], "per_gpu_eval_batch_s": 45, "per_gpu_train_batch_s": 45, "perfect": 99, "perfectli": [95, 103], "perform": [5, 11, 15, 16, 18, 21, 46, 58, 67, 68, 69, 72, 73, 74, 75, 76, 77, 81, 85, 90, 91, 94, 95, 101, 103, 104, 105, 108, 112], "person": [81, 89], "peter": 94, "phase": [100, 101], "pho": 110, "phrase": [81, 89], "pick": [75, 76], "pip": [81, 89, 90, 91, 92, 95, 97, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "pipelin": [103, 104, 105, 108, 111, 112], "pitt": [81, 97], "pixel": 89, "pizza": 110, "place": 94, "plai": [81, 89, 97, 103], "pleas": [87, 105, 108, 110, 111], "plenti": 89, "point": [15, 16, 67, 68, 69, 72, 73, 74, 75, 76, 77, 99], "pool": [15, 16, 36, 41, 46, 53, 66, 67, 69, 70, 71, 72, 73, 91], "pooler": [91, 92], "pooling_method": [67, 72, 73, 91, 106], "pop": [81, 97], "popular": [85, 99, 101, 105, 112], "portion": 89, "pos_scor": [4, 10], "posit": [95, 103, 108], "position_embed": [91, 92], "possess": 108, "possibl": [89, 92, 95, 99, 103], "pow": 94, "power": [81, 89, 110, 111, 112], "pq": 100, "practic": [94, 95, 97], "pre": [30, 58, 63], "prec": 95, "precis": [15, 16, 67, 68, 69, 72, 73, 74, 75, 76, 77, 94, 105, 106, 108, 111], "precision_at_1": 104, "precision_at_10": 104, "precision_at_100": 104, "precision_at_1000": 104, "precision_at_20": 104, "precision_at_3": 104, "precision_at_5": 104, "pred": [81, 95, 103, 108], "pred_hard_encod": [95, 103, 108], "pred_hard_encodings_rerank": 108, "predict": [81, 95, 101, 103], "prediction_loss_onli": 45, "prefer": [18, 21, 94, 99, 110], "prefix": 70, "premium": 110, "prepar": [10, 106], "preprocess": [99, 108], "preprocess_logits_for_metr": [7, 13, 32, 38, 43, 48, 55, 60, 65], "present": 110, "preserv": 112, "pretrainedmodel": [7, 13, 30, 32, 38, 43, 48, 55, 58, 60, 63, 65], "pretrainedtoken": [4, 6, 10, 12, 31, 35, 37, 42, 47, 54, 59, 64], "pretrainedtokenizerbas": [4, 7, 10, 13, 32, 35, 38, 43, 48, 55, 60, 65], "pretti": [81, 101, 112], "previous": 108, "price": 110, "primal": 94, "print": [81, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 105, 108, 110, 111, 112], "prior": 112, "problem": [99, 112], "proce": 90, "process": [4, 5, 6, 12, 15, 16, 35, 73, 94, 99, 103, 104, 105, 111], "process_index": [4, 35], "process_target_func": 15, "produc": [81, 97, 98], "product": [36, 41, 46, 53, 81, 89, 92, 99, 103], "productquant": 100, "professor": [81, 97], "profici": 108, "program": 110, "project": [81, 92, 97], "promot": 101, "prompt": [74, 75, 76, 110, 111, 112], "prompt_templ": 112, "prompttempl": 112, "promt": 112, "provid": [15, 18, 21, 46, 67, 68, 70, 72, 87, 89, 91, 98, 104, 105, 106, 110, 111], "proxim": 99, "psg": 10, "pt": [4, 10, 35, 91, 92, 103, 108], "public": [81, 97], "publish": [89, 90], "purpu": 89, "pursu": [81, 97], "push_back": 98, "push_to_hub": 45, "push_to_hub_model_id": 45, "push_to_hub_organ": 45, "push_to_hub_token": 45, "put": 111, "pypdf": 111, "pypdfload": 111, "python": [18, 21], "pytorch": [97, 98, 99, 100, 101], "q": [92, 95, 97, 103, 111, 112], "q545186": 21, "q_embed": [90, 103, 108, 110], "q_mask": 46, "q_rep": [5, 36, 41, 46, 53, 73], "qa": 90, "qa_recall_at_20": 21, "qbqtc": 106, "qry": 10, "qry_encod": 10, "qt": 92, "qt_8bit": [100, 101], "qtype": [100, 101], "qualiti": [81, 85, 89, 95, 99, 103, 110], "quantiz": [97, 99], "queri": [4, 5, 10, 11, 15, 16, 21, 35, 36, 41, 46, 53, 58, 67, 69, 70, 72, 73, 74, 75, 76, 77, 81, 89, 90, 91, 92, 95, 98, 99, 100, 101, 103, 105, 106, 108, 110, 112], "queries_embed": 81, "query_embed": [81, 90, 97, 103, 108], "query_engin": 112, "query_instruction_for_rerank": [3, 16, 74, 75, 76, 77], "query_instruction_for_retriev": [9, 15, 34, 67, 69, 70, 72, 73, 81, 90, 94, 97, 103, 106, 108, 110], "query_instruction_format": [3, 9, 15, 16, 34, 67, 69, 70, 72, 73, 74, 75, 76, 77], "query_max_len": [3, 4, 9, 10, 34, 35], "query_max_length": [15, 16, 69, 70, 72, 73, 74, 75, 76, 77], "query_s": [103, 108], "query_str": 112, "question": [21, 90, 110, 111, 112], "queue": [15, 16], "quick": [98, 100, 104], "quickli": [87, 111], "quoraretriev": [104, 105], "r": [98, 101, 105], "rag": 87, "rais": [4, 5, 10, 15, 16, 36, 37, 41, 46, 53, 67, 68, 72], "ram": 99, "ramen": 110, "randint": 94, "random": [4, 35, 98, 99, 100, 110], "rang": [81, 89, 94, 95, 98, 101, 103, 104, 108], "rank": [85, 95, 103, 104, 105, 106], "rank_i": [95, 103], "rapper": [81, 97], "ratio": [76, 95, 108], "raw": [4, 35], "raw_model": 92, "raw_peft": [29, 34, 52, 57], "ray_scop": 45, "re": [94, 95, 98, 101, 103, 110], "reach": 89, "read": 112, "read_index": [97, 103], "reader": 112, "readi": [10, 111], "readm": [105, 106], "real": [94, 101, 104], "reason": [85, 90, 99], "recal": 101, "recall_at_1": 104, "recall_at_10": 104, "recall_at_100": [18, 104], "recall_at_1000": 104, "recall_at_20": 104, "recall_at_3": 104, "recall_at_5": 104, "recalls_init": 108, "recalls_rerank": 108, "receiv": [81, 97], "reciproc": [81, 95, 103], "recommend": [15, 16, 106, 110], "recommended_act": 110, "record": [81, 97], "recursivecharactertextsplitt": 111, "red": 110, "redditclust": 105, "redditclusteringp2p": 105, "reduc": 100, "reduct": [100, 101], "refer": [105, 106, 110, 111, 112], "refresh": [4, 105, 106], "refresh_epoch": [0, 1, 2, 4], "regress": [105, 106], "rel": [95, 101], "rel_i": [95, 103], "relat": [89, 90, 94, 98, 110, 111], "relationship": [89, 112], "relax": [105, 110], "releas": [18, 85, 86, 89, 105], "relev": [18, 73, 74, 75, 76, 81, 90, 92, 94, 95, 97, 103, 105, 106, 108, 110], "reliabl": 110, "relu": 92, "remov": [99, 105], "remove_unused_column": 45, "renown": [81, 97, 110], "repeat": [81, 105], "replac": 100, "replic": 98, "repo": [87, 101, 111, 112], "report_to": 45, "repositori": 80, "repres": [81, 89, 90, 94, 95, 97, 103, 108, 110], "represent": [5, 36, 41, 46, 53, 92, 100, 111], "reproduc": [89, 105], "reproduct": 103, "request": 101, "requir": [91, 92, 98, 99, 110, 111, 112], "rerank": [0, 1, 3, 10, 11, 12, 13, 16, 18, 21, 25, 30, 31, 32, 52, 57, 58, 59, 60, 63, 64, 65, 66, 68, 74, 75, 76, 77, 87, 89, 92, 105, 106], "rerank_top_k": [18, 21], "reranker_max_length": [18, 21], "reranker_name_or_path": [18, 21], "rerankermodelargu": [25, 31, 49, 50, 51, 52, 56, 57, 59], "rerankermodelclass": 68, "rerankeroutput": [0, 1, 8, 13, 58], "rerpresent": 5, "res_id": [103, 108], "res_scor": [103, 108], "res_text": [103, 108], "research": [87, 98, 105], "resid": 110, "resolut": 99, "resourc": [87, 98, 105], "respect": [81, 92], "respoect": 105, "respons": [70, 89, 110, 111, 112], "response_synthes": 112, "restart": 98, "restaur": 110, "restore_callback_states_from_checkpoint": 45, "result": [15, 16, 74, 75, 76, 77, 81, 89, 91, 92, 94, 95, 97, 99, 101, 103, 104, 105, 106, 108], "results_fold": [105, 106], "results_list": 15, "results_queu": [15, 16], "resume_from_checkpoint": 45, "retain": 92, "retreiv": 106, "retriev": [15, 18, 67, 69, 70, 72, 73, 74, 75, 76, 77, 81, 85, 87, 89, 90, 95, 97, 104, 105, 106, 111], "retrieval_task": 104, "retrieval_use_exampl": 34, "return": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 30, 31, 35, 36, 37, 41, 42, 46, 47, 53, 54, 58, 59, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 90, 91, 92, 94, 95, 101, 103, 106, 108, 111, 112], "return_cobert_vec": 90, "return_colbert_vec": [46, 73, 90, 92], "return_dens": [46, 73, 90, 92], "return_dict": 91, "return_embed": 46, "return_output": [7, 13], "return_spars": [46, 73, 90, 92], "return_sparse_embed": 46, "return_tensor": [4, 10, 35, 91], "revers": [81, 108], "revolution": [81, 97], "rgb": 89, "rice": 110, "rnage": 90, "rnn": 89, "robert": [81, 97], "roberta": [89, 90, 92, 108], "role": [81, 97, 110], "root": [18, 21], "rough": 81, "row": 97, "ru": 21, "run": [0, 1, 2, 6, 8, 12, 18, 21, 25, 26, 27, 28, 31, 33, 37, 49, 50, 51, 54, 56, 59, 69, 70, 72, 73, 81, 87, 89, 90, 91, 97, 98, 100, 101, 103, 104, 106, 111], "run_nam": 45, "runner": [25, 26, 27, 28, 33, 39, 40, 44, 49, 50, 51, 56, 61, 62], "s1": 94, "s2": 94, "s2p": 104, "s3": 94, "s_": 92, "s_dens": 92, "s_lex_10_20": 92, "s_lex_10_21": 92, "s_mul_10_20": 92, "s_mul_10_21": 92, "s_rank_10_20": 92, "s_rank_10_21": 92, "sacrific": 99, "safe": [81, 97], "sai": 99, "sake": 97, "salad": 110, "sam": [81, 97], "same": [4, 90, 91, 94, 99, 108], "same_dataset_within_batch": [9, 34, 37], "samedataset": [4, 35], "sampl": [4, 95, 103], "sandwich": 110, "saniti": [98, 99], "satisfactori": 101, "satisfi": [89, 98], "save": [0, 1, 2, 5, 8, 11, 25, 26, 27, 33, 36, 39, 40, 41, 44, 46, 49, 50, 51, 53, 103, 111], "save_loc": 111, "save_merged_lora_model": [29, 34, 52, 57], "save_on_each_nod": 45, "save_only_model": 45, "save_pretrain": [0, 1, 8, 11], "save_safetensor": 45, "save_step": 45, "save_strategi": 45, "save_total_limit": 45, "scalar": 5, "scalarquant": [100, 101], "scale": [5, 36, 41, 46, 53, 85, 90, 99, 104, 112], "scenario": 92, "schedulertyp": 45, "scidoc": [104, 105], "scidocsrr": 105, "scifact": [104, 105], "scikit": 95, "scope": [99, 108], "score": [4, 5, 11, 16, 30, 35, 36, 41, 46, 53, 58, 63, 73, 74, 75, 76, 77, 81, 89, 90, 91, 92, 94, 95, 99, 103, 104, 105, 106, 108], "scratch": 98, "script": [18, 21], "se": 110, "seafood": 110, "seamlessli": 98, "search": [18, 81, 87, 89, 90, 95, 97, 99, 100, 101, 103, 108, 110], "search_result": [18, 21], "search_top_k": [18, 21], "seat": 110, "second": [73, 101, 103], "section": [91, 94, 105], "see": [91, 92, 94, 97, 98, 101, 104, 108, 110, 111, 112], "seed": [4, 35, 45, 98, 99, 100], "seen": [81, 99, 100], "select": [46, 76, 97, 98, 104, 108], "self": [5, 46, 74, 75, 76, 77, 91, 92, 106], "self_distill_start_step": [45, 46], "sell": [81, 97], "semant": [81, 89, 105, 106], "sen1_vec": 89, "sen2_vec": 89, "sensit": 99, "sentenc": [15, 16, 36, 41, 46, 53, 69, 70, 72, 73, 74, 75, 76, 77, 81, 90, 92, 94, 97, 103, 105, 106, 108, 110], "sentence1": [89, 94], "sentence2": [89, 94], "sentence_1": 94, "sentence_2": 94, "sentence_3": 94, "sentence_embed": 91, "sentence_pair": [16, 73, 74, 75, 76, 77], "sentence_pooling_method": [36, 41, 45, 46, 53], "sentence_transform": [89, 104, 105, 106], "sentences_1": 92, "sentences_2": 92, "sentencesplitt": 112, "sentencetransform": [15, 16, 89, 104, 105, 106], "sentens": 94, "sep": [85, 91], "sep_token": 3, "separ": 10, "sequenti": 99, "seri": [81, 86, 89, 94, 97], "serv": [105, 106, 110], "set": [4, 5, 18, 21, 35, 47, 70, 90, 92, 94, 95, 99, 101, 103, 105, 106, 108, 110, 112], "set1": 94, "set2": 94, "set_exampl": [66, 70, 71], "setup": [15, 16], "sever": [15, 16, 89, 94, 99], "sh": [18, 21], "shanghai": 110, "shape": [81, 89, 91, 94, 97, 101, 103, 108, 110], "shard": 98, "share": [90, 94], "she": 81, "shell": [18, 21, 105, 106], "short": [90, 110], "shot": 70, "should": [4, 15, 16, 35, 94, 98, 104, 105, 106, 110], "show": [81, 94, 95, 103, 104, 105, 111], "shrink": 99, "shrip": 110, "shuffl": [4, 10], "shuffle_ratio": [3, 9, 34], "sick": 105, "sift": 101, "sift1m": 101, "sigmoid": [74, 75, 76, 77], "signal": 89, "signific": 91, "sim": 92, "sim_scor": 81, "similar": [36, 41, 46, 53, 85, 89, 90, 91, 92, 99, 100, 101, 105, 106, 108], "similarli": [89, 90], "simpl": [57, 97, 111], "simpledirectoryread": 112, "simpli": [18, 21, 99, 108], "simultan": 90, "sinc": [94, 103, 111], "sing": 21, "singer": [81, 97], "singl": [10, 15, 69, 70, 72, 73, 74, 75, 76, 91], "size": [4, 5, 11, 15, 16, 30, 35, 36, 41, 46, 53, 58, 63, 69, 70, 72, 73, 74, 75, 76, 77, 85, 90, 91, 94, 98, 99, 100, 105, 106, 111, 112], "skip": 98, "skip_memory_metr": 45, "sklearn": [95, 103, 108], "slight": [15, 16, 67, 68, 69, 72, 73, 74, 75, 76, 77, 108], "slower": [99, 108], "small": [81, 85, 89, 90, 95, 99, 101, 108], "small_threshold": [9, 34], "smaller": [90, 92, 99, 100], "so": [89, 94, 97, 99, 100, 105, 110], "soft": 110, "solv": 112, "some": [87, 89, 95, 97, 99, 103, 110], "sometim": 108, "somewhat": 101, "songwrit": [81, 97], "soon": [105, 106], "soondubu": 110, "sophist": [89, 110], "sort": [81, 108], "sorted_indic": 81, "sota": 89, "sourc": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 91, 104, 111, 112], "space": [89, 97, 98, 99, 100, 103, 108, 112], "span": 90, "sparc": [46, 73, 92], "spars": [46, 47, 73, 89, 90], "sparse_scor": 46, "sparse_weight": 46, "speaker": 18, "spearman": [105, 106], "speci": 108, "special": [91, 92], "specif": [74, 75, 76, 81, 90, 97, 111, 112], "specifi": [4, 15, 16, 36, 41, 46, 53, 73, 74, 75, 76, 77, 112], "speed": [15, 16, 67, 68, 69, 72, 73, 74, 75, 76, 77, 90, 92, 97, 99, 100, 101, 108], "spend": 94, "spici": 110, "spinach": 110, "spirit": 110, "split": [5, 18, 21, 36, 41, 46, 53, 94, 103, 106, 108, 111], "split_batch": 45, "split_docu": 111, "splitter": 111, "spread": [81, 97], "sprintduplicatequest": 105, "sqrt": 94, "st": [105, 106], "stackexchangeclust": 105, "stackexchangeclusteringp2p": 105, "stackoverflowdupquest": 105, "stage": [89, 108], "stand": [86, 90, 111, 112], "standard": [104, 110], "standardgpuresourc": 98, "standout": 101, "stanford": [81, 97], "start": [15, 16, 46, 58, 95, 105, 106], "start_lay": [57, 58], "start_multi_process_pool": [0, 14, 15, 16], "state": [4, 36, 41, 46, 53, 67, 72, 73, 91, 92], "static": [4, 5, 15, 16, 47, 70], "statist": 89, "steak": 110, "steakhous": 110, "step": [45, 46, 89, 92, 94, 95, 98, 100, 105, 108, 110, 111], "stew": 110, "still": [81, 85, 101], "stop": [15, 16, 87], "stop_multi_process_pool": [0, 14, 15, 16], "storag": 112, "storage_context": 112, "storagecontext": 112, "store": [47, 97, 98, 99, 100, 103, 104, 105, 106, 108, 112], "str": [3, 4, 5, 7, 9, 10, 11, 13, 15, 16, 29, 32, 34, 35, 36, 38, 41, 43, 45, 46, 47, 48, 52, 53, 55, 57, 58, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 91, 106], "straightforward": 111, "stream": 112, "string": [15, 16], "strong": 108, "structur": [21, 91, 99, 106, 112], "sts12": 105, "sts13": 105, "sts14": 105, "sts15": 105, "sts16": 105, "sts17": 105, "sts22": 105, "stsb": 106, "stsbenchmark": 105, "student": 5, "student_scor": 5, "sub": [5, 36, 41, 46, 53, 100], "sub_batch_s": [4, 5, 35, 36, 41, 45, 46, 53], "subclass": [7, 13], "subquant": 100, "subsequ": 89, "subset": 104, "subtract": 94, "successfulli": 104, "suffer": [89, 99], "suggest": [101, 108, 110], "suitabl": 108, "sum": [91, 94, 103, 108], "sum_": [92, 94, 95, 103], "summar": 105, "summari": 105, "summat": 92, "summev": 105, "sunni": [89, 108], "super": [81, 97], "support": [5, 37, 74, 75, 76, 89, 90, 91, 92, 98, 99, 104, 105, 112], "suppos": [95, 110], "sure": [89, 91, 97, 98, 112], "surfac": 99, "surpris": 18, "surprisingli": 81, "sushi": 110, "sw": 18, "swift": [81, 97], "sy": [98, 101], "system": [81, 95, 98, 99, 100, 101, 103, 108, 110], "systemat": 89, "szechuan": 110, "t": [5, 21, 81, 89, 90, 91, 92, 94, 95, 97, 103, 105, 108], "t2rerank": 106, "t2retriev": 106, "tabl": 108, "takayama": 110, "take": [4, 81, 89, 94, 104, 105, 108], "tanh": [91, 92], "target": [5, 11, 15, 16, 36, 41, 46, 53], "target_devic": [15, 16], "target_modul": [29, 34, 52, 57], "task": [4, 15, 67, 69, 70, 72, 73, 74, 75, 76, 77, 81, 89, 90, 95, 103, 104, 105, 106, 112], "task_lang": 105, "task_list_clust": 105, "task_nam": 104, "tast": 110, "taylor": [81, 97], "te": 18, "tea": 110, "teach": 87, "teacher": [4, 5, 11, 35, 46, 58], "teacher_scor": [5, 11, 46, 58], "teacher_target": 5, "teatur": [11, 58], "techniqu": [87, 89, 99, 110, 112], "tell": [94, 103], "temp_dataset": 4, "temperatur": [5, 36, 41, 45, 46, 53], "templat": [15, 16, 67, 69, 70, 72, 73, 74, 75, 76, 77, 111, 112], "temporari": 98, "tensor": [5, 7, 11, 13, 15, 30, 32, 36, 38, 41, 43, 46, 48, 53, 55, 58, 60, 63, 65, 67, 69, 70, 72, 73, 91, 94, 106], "term": 92, "terribl": 99, "test": [21, 90, 101, 104, 105, 106], "text": [4, 10, 15, 16, 21, 30, 46, 58, 63, 70, 85, 89, 90, 92, 95, 100, 103, 104, 105, 106, 108], "text_input": 46, "text_qa_templ": 112, "text_splitt": 111, "textbf": [95, 103], "textual": [105, 106], "tf": 89, "tf32": 45, "th": [18, 92, 95, 103], "thai": 110, "than": [81, 89, 90, 94, 101], "thei": [18, 85, 89, 91, 95, 98, 103, 105], "them": [81, 89, 91, 92, 94, 97, 98, 99, 100, 111], "theme": 110, "themselv": 110, "therefor": 91, "theta": 94, "thi": [4, 15, 16, 35, 81, 87, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "thing": 111, "those": [81, 99], "thousand": 97, "three": [46, 89, 90, 98, 103], "thrid": 103, "through": [90, 91, 97, 98, 99, 103, 105, 106, 108, 112], "thu": [81, 94, 99, 100, 101, 108, 111], "thunewsclusteringp2p": 106, "thunewsclusterings2": 106, "tiger": 108, "tigri": 108, "time": [81, 85, 89, 92, 95, 97, 98, 99, 101, 103, 105, 106, 108], "tini": [81, 97, 101], "tip": 87, "tnew": 106, "todai": [89, 108], "tofu": 110, "togeth": [15, 16, 91], "token": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 69, 70, 72, 73, 74, 75, 76, 77, 89, 90, 91, 92, 106], "token_type_embed": [91, 92], "token_type_id": 91, "tokenizer_nam": [3, 9, 29, 34, 45, 52, 57], "tokenzi": 35, "tom": 110, "tonight": 94, "too": 99, "tool": 90, "toolkit": 87, "top": [95, 100, 103, 105, 106, 108, 112], "topic": [18, 87], "torch": [5, 7, 11, 13, 15, 30, 36, 41, 46, 53, 63, 67, 69, 70, 72, 73, 91, 92, 94], "torch_compil": 45, "torch_compile_backend": 45, "torch_compile_mod": 45, "torch_empty_cache_step": 45, "torchdynamo": 45, "total": [4, 35, 95, 97, 98, 101, 103, 108], "totoal": 95, "touche2020": [104, 105], "toxicconversationsclassif": 105, "tpu_metrics_debug": 45, "tpu_num_cor": 45, "tqdm": [103, 108], "tradeoff": [101, 108], "tradit": [89, 110], "train": [4, 5, 6, 7, 10, 11, 12, 13, 18, 30, 36, 37, 41, 45, 46, 47, 53, 58, 63, 89, 91, 97, 99, 100, 101, 103, 105, 106, 108, 111], "train_batch_s": [11, 30, 58, 63], "train_data": [3, 9, 34], "train_dataset": [4, 7, 13, 32, 38, 43, 48, 55, 60, 65], "train_group_s": [3, 9, 34], "trainer": [6, 7, 12, 13, 25, 26, 27, 28, 31, 33, 37, 39, 40, 42, 44, 47, 49, 50, 51, 54, 56, 59, 61, 62, 64], "trainer_util": 45, "trainercallback": [7, 13, 32, 38, 43, 48, 55, 60, 65], "trainercontrol": 4, "trainerst": 4, "training_arg": [4, 6, 12, 31, 35, 37, 42, 45, 47, 54, 59, 64], "trainingargu": [7, 13, 32, 38, 43, 48, 55, 60, 65], "transform": [15, 16, 45, 91, 92, 99, 100], "transpar": 89, "treccovid": [104, 105], "tri": [15, 16, 47, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "true": [4, 5, 7, 10, 13, 15, 16, 29, 34, 35, 36, 41, 45, 46, 52, 53, 57, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 89, 90, 91, 92, 94, 95, 97, 103, 108, 110, 111], "truncat": [91, 103], "trust_remote_cod": [3, 9, 29, 34, 45, 47, 52, 57, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "truth": [81, 95, 101, 103, 108], "try": [99, 103, 108], "tune": [6, 12, 90, 105], "tup": 108, "tupl": [6, 7, 10, 12, 13, 16, 31, 32, 37, 38, 42, 43, 47, 48, 54, 55, 59, 60, 64, 65, 73, 74, 75, 76, 77], "ture": [81, 97], "tutori": [81, 87, 95, 97, 98, 99, 101, 103, 104, 105, 106, 108, 110, 111, 112], "tweetsentimentextractionclassif": 105, "twentynewsgroupsclust": 105, "twittersemeval2015": 105, "twitterurlcorpu": 105, "two": [73, 89, 91, 92, 94, 95, 98, 99, 101, 103], "type": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 21, 29, 30, 31, 34, 35, 36, 37, 41, 42, 45, 46, 47, 52, 53, 54, 57, 58, 59, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 94, 97, 100, 103, 108, 112], "typic": [110, 111], "typolog": 21, "u": [80, 81, 89, 90, 91, 92, 94, 97, 101, 103, 108, 110, 111, 112], "u270": 110, "uncom": [97, 103], "under": 112, "underli": [30, 58, 63], "unfamiliar": 87, "unifi": 90, "unified_finetun": [45, 46], "union": [5, 7, 11, 13, 15, 16, 36, 41, 46, 53, 58, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 94], "univers": [81, 97], "unsqueez": 91, "unsupport": 15, "up": [15, 16, 67, 68, 69, 72, 73, 74, 75, 76, 77, 90, 92, 99, 105, 108, 110], "updat": [97, 98, 105], "update_prompt": 112, "upon": [81, 97], "uptown": 110, "urllib": 101, "urlretriev": 101, "us": [4, 5, 10, 11, 15, 16, 30, 35, 36, 41, 46, 47, 53, 58, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "usag": [89, 90, 97, 98, 99, 100, 101, 104, 111], "use_bf16": [74, 75, 76], "use_cpu": 45, "use_dataload": [74, 75], "use_flash_attn": [29, 34, 52, 57], "use_fp16": [15, 16, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 90, 92, 94, 97, 103, 108, 110], "use_ipex": 45, "use_legacy_prediction_loop": 45, "use_liger_kernel": 45, "use_lora": [29, 34, 52, 57], "use_mps_devic": 45, "use_self_distil": [45, 46], "use_slow_token": [29, 34], "user": [98, 101, 110, 112], "user_input": 110, "usual": [95, 100, 108], "util": 92, "v": [92, 105, 106], "v1": [81, 89, 91, 94, 97, 103, 104, 105, 106, 108, 110, 111, 112], "v2": [18, 21, 89, 106, 108], "valu": [5, 11, 36, 41, 46, 53, 90, 91, 92, 94, 95, 99], "valueerror": [4, 5, 10, 15, 16, 46, 67, 68], "var": [67, 68], "vari": 92, "variabl": [105, 106], "varieti": [104, 110], "variou": [89, 104], "vdev": 98, "ve": [81, 94, 104, 106], "vector": [15, 36, 41, 46, 53, 67, 69, 70, 72, 73, 81, 85, 89, 90, 91, 94, 97, 98, 99, 100, 101, 103, 108, 110, 111, 112], "vector_stor": 112, "vectordb": 111, "vectorstor": 111, "vectorstoreindex": 112, "veget": 110, "verb": 94, "veri": [81, 89, 90, 94, 97, 98, 99, 101, 105, 111, 112], "versatil": [81, 90, 97, 111], "version": [85, 90, 92, 98, 105, 111], "via": [15, 16, 81, 92, 97], "videoretriev": 106, "vietnam": 110, "vietnames": 110, "view": 94, "virtual": [97, 98], "vision": [81, 97], "visit": [87, 99], "vo": 89, "voic": [81, 97], "voronoi": 99, "voyage_api_kei": 89, "voyageai": 89, "vram": 98, "vre": 98, "w_": 92, "w_1": 92, "w_2": 92, "w_3": 92, "wa": [81, 85, 97], "wai": [46, 73, 81, 89, 94, 98, 99, 100], "waimai": 106, "wait": 105, "walk": [90, 103], "wall": [98, 101], "want": [15, 16, 80, 81, 87, 97, 99, 103, 105, 110, 111, 112], "warmup_ratio": 45, "warmup_step": 45, "warn": 45, "watch": [89, 94], "wave": 89, "we": [81, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "websit": 106, "weight": [46, 73, 76, 90, 92], "weight_decai": 45, "weights_for_different_mod": 73, "welcom": 87, "well": [81, 85, 95, 99, 104, 108, 110, 111, 112], "went": 98, "were": [85, 89], "what": [81, 90, 92, 94, 99, 108, 111, 112], "when": [5, 16, 47, 69, 70, 72, 73, 95, 98, 99, 100, 101, 103, 105, 112], "where": [92, 95, 97, 99, 103, 110, 111], "whether": [95, 98], "which": [5, 15, 16, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 81, 85, 86, 90, 92, 94, 95, 97, 99, 104, 105, 106, 108, 110, 111, 112], "while": [81, 89, 94, 98, 99, 112], "who": [18, 21, 81, 97], "whole": [91, 97, 99, 103, 104, 105, 111], "why": [99, 101], "wide": [81, 95, 99, 101, 103, 104, 105], "win": [81, 97], "wine": 110, "within": [89, 92, 95, 105, 106, 112], "without": [80, 85, 90, 99, 110, 111], "won": 81, "wonder": [94, 110], "wood": 110, "word": [89, 92, 103], "word2vec": 89, "word_embed": [91, 92], "work": [15, 16, 81, 90, 97, 99, 108], "worker": [74, 75], "world": [99, 104, 112], "would": [89, 103, 104, 111, 112], "wrapper": 10, "write": [95, 111], "write_index": [97, 103], "written": 105, "wrote": 91, "wsdm": 18, "x": [18, 21, 91, 92], "x86_64": [98, 99, 100, 101], "xlm": [90, 92, 108], "xlmrobertaattent": 92, "xlmrobertaembed": 92, "xlmrobertaencod": 92, "xlmrobertaintermedi": 92, "xlmrobertalay": 92, "xlmrobertamodel": 92, "xlmrobertaoutput": 92, "xlmrobertapool": 92, "xlmrobertaselfattent": 92, "xlmrobertaselfoutput": 92, "yi": 110, "yichiran": 110, "yo": 18, "york": 110, "you": [15, 16, 18, 21, 74, 75, 76, 80, 87, 89, 90, 91, 92, 94, 97, 98, 101, 103, 104, 105, 106, 108, 110, 111, 112], "your": [18, 21, 89, 90, 91, 92, 97, 98, 101, 103, 104, 105, 106, 110, 111, 112], "your_api_kei": [89, 110, 111, 112], "your_existing_readm": 105, "yum": 110, "zero": [95, 103, 108], "zh": [85, 90, 106], "zh_cn": 21, "zh_result": 106, "zip": [81, 94, 95, 98, 103, 108], "\u0434\u044d\u0439\u0432": 21, "\u043a\u0442\u043e": 21, "\u043f\u043e\u0435\u0442": 21, "\u044d\u0434\u043c\u0443\u043d\u0434\u0441": 21, "\u306f\u8ab0\u304c\u6b4c\u3063\u3066\u3044\u307e\u3059\u304b": 21, "\u30a8\u30c9\u30e2\u30f3\u30ba": 21, "\u30c7\u30a4\u30d6": 21, "\u30c7\u30a4\u30f4": 21, "\u30c7\u30fc\u30d6": 21, "\u4e3a\u8fd9\u4e2a\u53e5\u5b50\u751f\u6210\u8868\u793a\u4ee5\u7528\u4e8e\u68c0\u7d22\u76f8\u5173\u6587\u7ae0": 106, "\u57c3\u5fb7\u8499\u5179": 21, "\u6234\u7ef4": 21, "\u662f\u8c01\u6f14\u5531\u7684": 21}, "titles": ["Abstract Class", "Finetune", "Embedder", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Reranker", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Inference", "AbsEmbedder", "AbsReranker", "Evaluation", "MIRACL", "data_loader", "runner", "MKQA", "data_loader", "evaluator", "runner", "Finetune", "Embedder", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "ICL", "Arguments", "Dataset", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "M3", "Arguments", "Modeling", "Runner", "Trainer", "Reranker", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "Layerwise", "Arguments", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "Inference", "FlagAutoModel", "FlagAutoReranker", "BaseEmbedder", "ICLLLMEmbedder", "Embedder", "BaseEmbedder", "M3Embedder", "BaseLLMReranker", "LayerWiseLLMReranker", "LightweightLLMReranker", "BaseReranker", "Reranker", "&lt;no title&gt;", "Installation", "Quick Start", "BGE-en-icl", "BGE-M3", "BGE-Reranker", "BGE-v1", "Introduction", "BAAI General Embedding", "1. Embedding", "Intro to Embedding", "BGE Series", "BGE Explanation", "BGE-M3", "2. Metrics", "Similarity", "Evaluation Metrics", "3. Indexing", "Indexing Using Faiss", "Faiss GPU", "Faiss Indexes", "Faiss Quantizers", "Choosing Index", "4. Evaluation", "Evaluation", "MTEB", "MTEB Leaderboard", "C-MTEB", "5. Reranking", "Reranker", "6. RAG", "Simple RAG From Scratch", "RAG with LangChain", "RAG with LlamaIndex"], "titleterms": {"0": [81, 91, 92, 95, 97, 101, 103, 104, 105, 106, 108, 110, 111, 112], "1": [81, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112], "2": [81, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 105, 106, 108, 110, 111, 112], "3": [81, 90, 92, 94, 95, 96, 97, 98, 99, 101, 103, 105, 106, 108, 110, 111, 112], "4": [81, 90, 92, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108], "5": [85, 90, 94, 95, 97, 98, 101, 103, 107, 108], "6": [101, 108, 109], "absargu": [3, 9], "absdataset": [4, 10], "absembedd": 15, "absembeddercol": 4, "absembeddermodel": 5, "absembeddersamedatasetcol": [4, 35], "absembeddersamedatasettraindataset": 4, "absembeddertrain": [6, 7], "absembeddertraindataset": 4, "absllmrerankercol": 10, "absllmrerankertraindataset": 10, "absmodel": [5, 11], "absrerank": 16, "absrerankercol": 10, "absrerankermodel": 11, "absrerankertrain": [12, 13], "absrerankertraindataset": 10, "absrunn": [6, 12], "abstract": 0, "abstrain": [7, 13], "ai": 89, "all": 98, "answer": 97, "approach": 94, "argument": [29, 34, 45, 52, 57], "avail": 98, "baai": [87, 90], "background": 89, "base": [28, 40, 51, 62], "baseembedd": [69, 72], "basellmrerank": 74, "basererank": 77, "bge": [82, 83, 84, 85, 89, 90, 91, 92], "build": 98, "c": 106, "calcul": 81, "call": 94, "choos": 101, "class": 0, "commerci": 89, "comparison": 91, "cosin": 94, "cpu": [97, 98], "creat": 98, "data": [98, 110, 111, 112], "data_load": [19, 22], "dataset": [35, 97, 101, 103, 106, 108], "decod": [27, 50], "decoderonlyembeddericlsamedatasettraindataset": 35, "dens": 92, "distanc": 94, "dot": 94, "embed": [81, 87, 88, 89, 90, 97, 103, 108], "embedd": [2, 26, 71, 90], "embedderoutput": 5, "embeddertrainercallbackfordatarefresh": 4, "en": 82, "encod": [39, 61, 91], "encoderonlyembedderm3model": 46, "encoderonlyembedderm3modelforinfer": 46, "euclidean": 94, "evalu": [17, 23, 81, 95, 102, 103, 105, 106, 108], "exampl": [94, 99], "explan": 91, "faiss": [97, 98, 99, 100], "find": 97, "finetun": [1, 25], "flagautomodel": 67, "flagautorerank": 68, "flat": 101, "from": [80, 110], "function": [92, 94, 101], "futur": 105, "gener": [87, 90, 110, 111, 112], "get": 89, "gpu": [97, 98], "helper": 101, "hnsw": 101, "hybrid": 92, "icl": [33, 82], "iclllmembedd": 70, "implement": 94, "index": [96, 97, 98, 99, 100, 101, 103, 108, 110, 111, 112], "indexflat": 99, "indexhnsw": 99, "indexivf": 99, "indexlsh": 99, "infer": [14, 66], "inner": 94, "instal": [80, 91, 92, 98, 104, 105, 106], "intro": [89, 99, 104], "introduct": 86, "ivf": [100, 101], "jaccard": 94, "langchain": 111, "layerwis": 56, "layerwisellmrerank": 75, "leaderboard": [105, 106], "lightweightllmrerank": 76, "linux": 97, "llamaindex": 112, "llm": 90, "load": 103, "lsh": 101, "m3": [44, 83, 90, 92], "m3embedd": 73, "map": 95, "maximum": 94, "method": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 19, 22, 30, 35, 36, 41, 46, 53, 58, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "metric": [93, 95], "miracl": 18, "mkqa": 21, "model": [30, 36, 41, 46, 53, 58, 63, 89, 90, 106], "mrr": [95, 103, 108], "mteb": [104, 105, 106], "multi": 92, "multipl": 98, "naiv": 94, "ndcg": [95, 103, 108], "onli": [27, 39, 50, 61], "open": 89, "openai": 89, "option": [97, 98], "packag": 101, "partial": 105, "pip": 80, "precis": 95, "prepar": [81, 95, 98, 99, 100, 101, 110, 111, 112], "product": [94, 100, 101], "pytorch": 94, "quantiz": [100, 101], "queri": 97, "quick": 81, "rag": [109, 110, 111, 112], "rank": [81, 92], "recal": [95, 103, 108], "relationship": 94, "rerank": [8, 49, 78, 84, 107, 108], "rerankeroutput": 11, "result": 98, "retreiv": 111, "retriev": [92, 103, 108, 110, 112], "run": 105, "runner": [20, 24, 31, 37, 42, 47, 54, 59, 64], "save": 97, "scalar": [100, 101], "scratch": 110, "search": [94, 98], "sentenc": [89, 91], "seri": 90, "setup": [97, 103, 108], "shortag": 99, "similar": [81, 94], "simpl": 110, "singl": 98, "sourc": [80, 89], "spars": 92, "start": 81, "step": [81, 97, 103], "structur": 92, "submit": [105, 106], "text": [81, 97], "tradeoff": 99, "trainer": [32, 38, 43, 48, 55, 60, 65], "transform": 89, "us": [80, 97], "v1": [85, 90], "vector": 92, "voyag": 89, "work": 105, "x86_64": 97}})